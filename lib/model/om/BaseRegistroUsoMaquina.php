<?php

/**
 * Base class that represents a row from the 'registro_uso_maquina' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 01/24/14 05:38:20
 *
 * @package    lib.model.om
 */
abstract class BaseRegistroUsoMaquina extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RegistroUsoMaquinaPeer
	 */
	protected static $peer;

	/**
	 * The value for the rum_codigo field.
	 * @var        int
	 */
	protected $rum_codigo;

	/**
	 * The value for the rum_maq_codigo field.
	 * @var        int
	 */
	protected $rum_maq_codigo;

	/**
	 * The value for the rum_met_codigo field.
	 * @var        int
	 */
	protected $rum_met_codigo;

	/**
	 * The value for the rum_usu_codigo field.
	 * @var        int
	 */
	protected $rum_usu_codigo;

	/**
	 * The value for the rum_usu_codigo_elimino field.
	 * @var        int
	 */
	protected $rum_usu_codigo_elimino;

	/**
	 * The value for the rum_hora_inicio_trabajo field.
	 * @var        string
	 */
	protected $rum_hora_inicio_trabajo;

	/**
	 * The value for the rum_hora_fin_trabajo field.
	 * @var        string
	 */
	protected $rum_hora_fin_trabajo;

	/**
	 * The value for the rum_tiempo_entre_modelo field.
	 * @var        string
	 */
	protected $rum_tiempo_entre_modelo;

	/**
	 * The value for the rum_tiempo_cambio_modelo field.
	 * @var        string
	 */
	protected $rum_tiempo_cambio_modelo;

	/**
	 * The value for the rum_tiempo_corrida_sistema field.
	 * @var        string
	 */
	protected $rum_tiempo_corrida_sistema;

	/**
	 * The value for the rum_tiempo_corrida_curvas field.
	 * @var        string
	 */
	protected $rum_tiempo_corrida_curvas;

	/**
	 * The value for the rum_tiempo_corrida_sistema_est field.
	 * @var        string
	 */
	protected $rum_tiempo_corrida_sistema_est;

	/**
	 * The value for the rum_tiempo_corrida_curvas_esta field.
	 * @var        string
	 */
	protected $rum_tiempo_corrida_curvas_esta;

	/**
	 * The value for the rum_num_inyeccion_estandar_per field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar_per;

	/**
	 * The value for the rum_numero_inyeccion_estandar field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar;

	/**
	 * The value for the rum_tiempo_preparacion field.
	 * @var        string
	 */
	protected $rum_tiempo_preparacion;

	/**
	 * The value for the rum_tiempo_duracion_ciclo field.
	 * @var        string
	 */
	protected $rum_tiempo_duracion_ciclo;

	/**
	 * The value for the rum_numero_corridas field.
	 * @var        int
	 */
	protected $rum_numero_corridas;

	/**
	 * The value for the rum_numero_inyeccion_estandar1 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar1;

	/**
	 * The value for the rum_numero_inyeccion_estandar2 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar2;

	/**
	 * The value for the rum_numero_inyeccion_estandar3 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar3;

	/**
	 * The value for the rum_numero_inyeccion_estandar4 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar4;

	/**
	 * The value for the rum_numero_inyeccion_estandar5 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar5;

	/**
	 * The value for the rum_numero_inyeccion_estandar6 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar6;

	/**
	 * The value for the rum_numero_inyeccion_estandar7 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar7;

	/**
	 * The value for the rum_numero_inyeccion_estandar8 field.
	 * @var        string
	 */
	protected $rum_numero_inyeccion_estandar8;

	/**
	 * The value for the rum_num_inyeccion_estandar1_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar1_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar2_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar2_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar3_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar3_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar4_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar4_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar5_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar5_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar6_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar6_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar7_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar7_pe;

	/**
	 * The value for the rum_num_inyeccion_estandar8_pe field.
	 * @var        string
	 */
	protected $rum_num_inyeccion_estandar8_pe;

	/**
	 * The value for the rum_num_muestras_producto field.
	 * @var        string
	 */
	protected $rum_num_muestras_producto;

	/**
	 * The value for the rum_num_muestras_estabilidad field.
	 * @var        string
	 */
	protected $rum_num_muestras_estabilidad;

	/**
	 * The value for the rum_num_muestras_materia_prima field.
	 * @var        string
	 */
	protected $rum_num_muestras_materia_prima;

	/**
	 * The value for the rum_num_muestras_pureza field.
	 * @var        string
	 */
	protected $rum_num_muestras_pureza;

	/**
	 * The value for the rum_num_muestras_disolucion field.
	 * @var        string
	 */
	protected $rum_num_muestras_disolucion;

	/**
	 * The value for the rum_num_muestras_uniformidad field.
	 * @var        string
	 */
	protected $rum_num_muestras_uniformidad;

	/**
	 * The value for the rum_num_mu_producto_perdida field.
	 * @var        string
	 */
	protected $rum_num_mu_producto_perdida;

	/**
	 * The value for the rum_num_mu_estabilidad_perdida field.
	 * @var        string
	 */
	protected $rum_num_mu_estabilidad_perdida;

	/**
	 * The value for the rum_num_mu_materia_prima_perdi field.
	 * @var        string
	 */
	protected $rum_num_mu_materia_prima_perdi;

	/**
	 * The value for the rum_num_muestras_pureza_perdid field.
	 * @var        string
	 */
	protected $rum_num_muestras_pureza_perdid;

	/**
	 * The value for the rum_num_muestras_disolucion_pe field.
	 * @var        string
	 */
	protected $rum_num_muestras_disolucion_pe;

	/**
	 * The value for the rum_num_muestras_uniformidad_p field.
	 * @var        string
	 */
	protected $rum_num_muestras_uniformidad_p;

	/**
	 * The value for the rum_num_inyec_x_muestra_estabi field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_muestra_estabi;

	/**
	 * The value for the rum_num_inyec_x_muestra_produc field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_muestra_produc;

	/**
	 * The value for the rum_num_inyec_x_muestra_materi field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_muestra_materi;

	/**
	 * The value for the rum_num_inyec_x_muestra_pureza field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_muestra_pureza;

	/**
	 * The value for the rum_num_inyec_x_muestra_disolu field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_muestra_disolu;

	/**
	 * The value for the rum_num_inyec_x_muestra_unifor field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_muestra_unifor;

	/**
	 * The value for the rum_num_inyec_x_mu_estabi_perd field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_mu_estabi_perd;

	/**
	 * The value for the rum_num_inyec_x_mu_produc_perd field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_mu_produc_perd;

	/**
	 * The value for the rum_num_inyec_x_mu_materi_perd field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_mu_materi_perd;

	/**
	 * The value for the rum_num_inyec_x_mu_pureza_perd field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_mu_pureza_perd;

	/**
	 * The value for the rum_num_inyec_x_mu_disolu_perd field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_mu_disolu_perd;

	/**
	 * The value for the rum_num_inyec_x_mu_unifor_perd field.
	 * @var        string
	 */
	protected $rum_num_inyec_x_mu_unifor_perd;

	/**
	 * The value for the rum_fallas field.
	 * @var        string
	 */
	protected $rum_fallas;

	/**
	 * The value for the rum_observaciones field.
	 * @var        string
	 */
	protected $rum_observaciones;

	/**
	 * The value for the rum_fecha field.
	 * @var        string
	 */
	protected $rum_fecha;

	/**
	 * The value for the rum_fecha_hora_reg_sistema field.
	 * @var        string
	 */
	protected $rum_fecha_hora_reg_sistema;

	/**
	 * The value for the rum_causa_eliminacion field.
	 * @var        string
	 */
	protected $rum_causa_eliminacion;

	/**
	 * The value for the rum_fecha_hora_elim_sistema field.
	 * @var        string
	 */
	protected $rum_fecha_hora_elim_sistema;

	/**
	 * The value for the rum_eliminado field.
	 * @var        int
	 */
	protected $rum_eliminado;

	/**
	 * The value for the rum_tc_producto_terminado field.
	 * @var        string
	 */
	protected $rum_tc_producto_terminado;

	/**
	 * The value for the rum_tc_estabilidad field.
	 * @var        string
	 */
	protected $rum_tc_estabilidad;

	/**
	 * The value for the rum_tc_materia_prima field.
	 * @var        string
	 */
	protected $rum_tc_materia_prima;

	/**
	 * The value for the rum_tc_pureza field.
	 * @var        string
	 */
	protected $rum_tc_pureza;

	/**
	 * The value for the rum_tc_disolucion field.
	 * @var        string
	 */
	protected $rum_tc_disolucion;

	/**
	 * The value for the rum_tc_uniformidad field.
	 * @var        string
	 */
	protected $rum_tc_uniformidad;

	/**
	 * The value for the rum_tc_producto_terminado_esta field.
	 * @var        string
	 */
	protected $rum_tc_producto_terminado_esta;

	/**
	 * The value for the rum_tc_estabilidad_estandar field.
	 * @var        string
	 */
	protected $rum_tc_estabilidad_estandar;

	/**
	 * The value for the rum_tc_materia_prima_estandar field.
	 * @var        string
	 */
	protected $rum_tc_materia_prima_estandar;

	/**
	 * The value for the rum_tc_pureza_estandar field.
	 * @var        string
	 */
	protected $rum_tc_pureza_estandar;

	/**
	 * The value for the rum_tc_disolucion_estandar field.
	 * @var        string
	 */
	protected $rum_tc_disolucion_estandar;

	/**
	 * The value for the rum_tc_uniformidad_estandar field.
	 * @var        string
	 */
	protected $rum_tc_uniformidad_estandar;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'RegistroUsoMaquinaPeer';

	/**
	 * Get the [rum_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getRumCodigo()
	{
		return $this->rum_codigo;
	}

	/**
	 * Get the [rum_maq_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getRumMaqCodigo()
	{
		return $this->rum_maq_codigo;
	}

	/**
	 * Get the [rum_met_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getRumMetCodigo()
	{
		return $this->rum_met_codigo;
	}

	/**
	 * Get the [rum_usu_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getRumUsuCodigo()
	{
		return $this->rum_usu_codigo;
	}

	/**
	 * Get the [rum_usu_codigo_elimino] column value.
	 * 
	 * @return     int
	 */
	public function getRumUsuCodigoElimino()
	{
		return $this->rum_usu_codigo_elimino;
	}

	/**
	 * Get the [optionally formatted] temporal [rum_hora_inicio_trabajo] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumHoraInicioTrabajo($format = 'H:i:s')
	{
		if ($this->rum_hora_inicio_trabajo === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->rum_hora_inicio_trabajo);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_hora_inicio_trabajo, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [rum_hora_fin_trabajo] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumHoraFinTrabajo($format = 'H:i:s')
	{
		if ($this->rum_hora_fin_trabajo === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->rum_hora_fin_trabajo);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_hora_fin_trabajo, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [rum_tiempo_entre_modelo] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumTiempoEntreModelo($format = 'H:i:s')
	{
		if ($this->rum_tiempo_entre_modelo === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->rum_tiempo_entre_modelo);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_tiempo_entre_modelo, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [rum_tiempo_cambio_modelo] column value.
	 * 
	 * @return     string
	 */
	public function getRumTiempoCambioModelo()
	{
		return $this->rum_tiempo_cambio_modelo;
	}

	/**
	 * Get the [rum_tiempo_corrida_sistema] column value.
	 * 
	 * @return     string
	 */
	public function getRumTiempoCorridaSistema()
	{
		return $this->rum_tiempo_corrida_sistema;
	}

	/**
	 * Get the [rum_tiempo_corrida_curvas] column value.
	 * 
	 * @return     string
	 */
	public function getRumTiempoCorridaCurvas()
	{
		return $this->rum_tiempo_corrida_curvas;
	}

	/**
	 * Get the [rum_tiempo_corrida_sistema_est] column value.
	 * 
	 * @return     string
	 */
	public function getRumTiempoCorridaSistemaEst()
	{
		return $this->rum_tiempo_corrida_sistema_est;
	}

	/**
	 * Get the [rum_tiempo_corrida_curvas_esta] column value.
	 * 
	 * @return     string
	 */
	public function getRumTiempoCorridaCurvasEsta()
	{
		return $this->rum_tiempo_corrida_curvas_esta;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar_per] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandarPer()
	{
		return $this->rum_num_inyeccion_estandar_per;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar()
	{
		return $this->rum_numero_inyeccion_estandar;
	}

	/**
	 * Get the [rum_tiempo_preparacion] column value.
	 * 
	 * @return     string
	 */
	public function getRumTiempoPreparacion()
	{
		return $this->rum_tiempo_preparacion;
	}

	/**
	 * Get the [optionally formatted] temporal [rum_tiempo_duracion_ciclo] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumTiempoDuracionCiclo($format = 'H:i:s')
	{
		if ($this->rum_tiempo_duracion_ciclo === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->rum_tiempo_duracion_ciclo);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_tiempo_duracion_ciclo, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [rum_numero_corridas] column value.
	 * 
	 * @return     int
	 */
	public function getRumNumeroCorridas()
	{
		return $this->rum_numero_corridas;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar1] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar1()
	{
		return $this->rum_numero_inyeccion_estandar1;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar2] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar2()
	{
		return $this->rum_numero_inyeccion_estandar2;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar3] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar3()
	{
		return $this->rum_numero_inyeccion_estandar3;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar4] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar4()
	{
		return $this->rum_numero_inyeccion_estandar4;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar5] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar5()
	{
		return $this->rum_numero_inyeccion_estandar5;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar6] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar6()
	{
		return $this->rum_numero_inyeccion_estandar6;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar7] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar7()
	{
		return $this->rum_numero_inyeccion_estandar7;
	}

	/**
	 * Get the [rum_numero_inyeccion_estandar8] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumeroInyeccionEstandar8()
	{
		return $this->rum_numero_inyeccion_estandar8;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar1_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar1Pe()
	{
		return $this->rum_num_inyeccion_estandar1_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar2_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar2Pe()
	{
		return $this->rum_num_inyeccion_estandar2_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar3_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar3Pe()
	{
		return $this->rum_num_inyeccion_estandar3_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar4_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar4Pe()
	{
		return $this->rum_num_inyeccion_estandar4_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar5_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar5Pe()
	{
		return $this->rum_num_inyeccion_estandar5_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar6_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar6Pe()
	{
		return $this->rum_num_inyeccion_estandar6_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar7_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar7Pe()
	{
		return $this->rum_num_inyeccion_estandar7_pe;
	}

	/**
	 * Get the [rum_num_inyeccion_estandar8_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyeccionEstandar8Pe()
	{
		return $this->rum_num_inyeccion_estandar8_pe;
	}

	/**
	 * Get the [rum_num_muestras_producto] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasProducto()
	{
		return $this->rum_num_muestras_producto;
	}

	/**
	 * Get the [rum_num_muestras_estabilidad] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasEstabilidad()
	{
		return $this->rum_num_muestras_estabilidad;
	}

	/**
	 * Get the [rum_num_muestras_materia_prima] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasMateriaPrima()
	{
		return $this->rum_num_muestras_materia_prima;
	}

	/**
	 * Get the [rum_num_muestras_pureza] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasPureza()
	{
		return $this->rum_num_muestras_pureza;
	}

	/**
	 * Get the [rum_num_muestras_disolucion] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasDisolucion()
	{
		return $this->rum_num_muestras_disolucion;
	}

	/**
	 * Get the [rum_num_muestras_uniformidad] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasUniformidad()
	{
		return $this->rum_num_muestras_uniformidad;
	}

	/**
	 * Get the [rum_num_mu_producto_perdida] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuProductoPerdida()
	{
		return $this->rum_num_mu_producto_perdida;
	}

	/**
	 * Get the [rum_num_mu_estabilidad_perdida] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuEstabilidadPerdida()
	{
		return $this->rum_num_mu_estabilidad_perdida;
	}

	/**
	 * Get the [rum_num_mu_materia_prima_perdi] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuMateriaPrimaPerdi()
	{
		return $this->rum_num_mu_materia_prima_perdi;
	}

	/**
	 * Get the [rum_num_muestras_pureza_perdid] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasPurezaPerdid()
	{
		return $this->rum_num_muestras_pureza_perdid;
	}

	/**
	 * Get the [rum_num_muestras_disolucion_pe] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasDisolucionPe()
	{
		return $this->rum_num_muestras_disolucion_pe;
	}

	/**
	 * Get the [rum_num_muestras_uniformidad_p] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumMuestrasUniformidadP()
	{
		return $this->rum_num_muestras_uniformidad_p;
	}

	/**
	 * Get the [rum_num_inyec_x_muestra_estabi] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuestraEstabi()
	{
		return $this->rum_num_inyec_x_muestra_estabi;
	}

	/**
	 * Get the [rum_num_inyec_x_muestra_produc] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuestraProduc()
	{
		return $this->rum_num_inyec_x_muestra_produc;
	}

	/**
	 * Get the [rum_num_inyec_x_muestra_materi] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuestraMateri()
	{
		return $this->rum_num_inyec_x_muestra_materi;
	}

	/**
	 * Get the [rum_num_inyec_x_muestra_pureza] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuestraPureza()
	{
		return $this->rum_num_inyec_x_muestra_pureza;
	}

	/**
	 * Get the [rum_num_inyec_x_muestra_disolu] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuestraDisolu()
	{
		return $this->rum_num_inyec_x_muestra_disolu;
	}

	/**
	 * Get the [rum_num_inyec_x_muestra_unifor] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuestraUnifor()
	{
		return $this->rum_num_inyec_x_muestra_unifor;
	}

	/**
	 * Get the [rum_num_inyec_x_mu_estabi_perd] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuEstabiPerd()
	{
		return $this->rum_num_inyec_x_mu_estabi_perd;
	}

	/**
	 * Get the [rum_num_inyec_x_mu_produc_perd] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuProducPerd()
	{
		return $this->rum_num_inyec_x_mu_produc_perd;
	}

	/**
	 * Get the [rum_num_inyec_x_mu_materi_perd] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuMateriPerd()
	{
		return $this->rum_num_inyec_x_mu_materi_perd;
	}

	/**
	 * Get the [rum_num_inyec_x_mu_pureza_perd] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuPurezaPerd()
	{
		return $this->rum_num_inyec_x_mu_pureza_perd;
	}

	/**
	 * Get the [rum_num_inyec_x_mu_disolu_perd] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuDisoluPerd()
	{
		return $this->rum_num_inyec_x_mu_disolu_perd;
	}

	/**
	 * Get the [rum_num_inyec_x_mu_unifor_perd] column value.
	 * 
	 * @return     string
	 */
	public function getRumNumInyecXMuUniforPerd()
	{
		return $this->rum_num_inyec_x_mu_unifor_perd;
	}

	/**
	 * Get the [rum_fallas] column value.
	 * 
	 * @return     string
	 */
	public function getRumFallas()
	{
		return $this->rum_fallas;
	}

	/**
	 * Get the [rum_observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getRumObservaciones()
	{
		return $this->rum_observaciones;
	}

	/**
	 * Get the [optionally formatted] temporal [rum_fecha] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumFecha($format = 'Y-m-d')
	{
		if ($this->rum_fecha === null) {
			return null;
		}


		if ($this->rum_fecha === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->rum_fecha);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_fecha, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [rum_fecha_hora_reg_sistema] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumFechaHoraRegSistema($format = 'Y-m-d H:i:s')
	{
		if ($this->rum_fecha_hora_reg_sistema === null) {
			return null;
		}


		if ($this->rum_fecha_hora_reg_sistema === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->rum_fecha_hora_reg_sistema);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_fecha_hora_reg_sistema, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [rum_causa_eliminacion] column value.
	 * 
	 * @return     string
	 */
	public function getRumCausaEliminacion()
	{
		return $this->rum_causa_eliminacion;
	}

	/**
	 * Get the [optionally formatted] temporal [rum_fecha_hora_elim_sistema] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRumFechaHoraElimSistema($format = 'Y-m-d H:i:s')
	{
		if ($this->rum_fecha_hora_elim_sistema === null) {
			return null;
		}


		if ($this->rum_fecha_hora_elim_sistema === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->rum_fecha_hora_elim_sistema);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->rum_fecha_hora_elim_sistema, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [rum_eliminado] column value.
	 * 
	 * @return     int
	 */
	public function getRumEliminado()
	{
		return $this->rum_eliminado;
	}

	/**
	 * Get the [rum_tc_producto_terminado] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcProductoTerminado()
	{
		return $this->rum_tc_producto_terminado;
	}

	/**
	 * Get the [rum_tc_estabilidad] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcEstabilidad()
	{
		return $this->rum_tc_estabilidad;
	}

	/**
	 * Get the [rum_tc_materia_prima] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcMateriaPrima()
	{
		return $this->rum_tc_materia_prima;
	}

	/**
	 * Get the [rum_tc_pureza] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcPureza()
	{
		return $this->rum_tc_pureza;
	}

	/**
	 * Get the [rum_tc_disolucion] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcDisolucion()
	{
		return $this->rum_tc_disolucion;
	}

	/**
	 * Get the [rum_tc_uniformidad] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcUniformidad()
	{
		return $this->rum_tc_uniformidad;
	}

	/**
	 * Get the [rum_tc_producto_terminado_esta] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcProductoTerminadoEsta()
	{
		return $this->rum_tc_producto_terminado_esta;
	}

	/**
	 * Get the [rum_tc_estabilidad_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcEstabilidadEstandar()
	{
		return $this->rum_tc_estabilidad_estandar;
	}

	/**
	 * Get the [rum_tc_materia_prima_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcMateriaPrimaEstandar()
	{
		return $this->rum_tc_materia_prima_estandar;
	}

	/**
	 * Get the [rum_tc_pureza_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcPurezaEstandar()
	{
		return $this->rum_tc_pureza_estandar;
	}

	/**
	 * Get the [rum_tc_disolucion_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcDisolucionEstandar()
	{
		return $this->rum_tc_disolucion_estandar;
	}

	/**
	 * Get the [rum_tc_uniformidad_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getRumTcUniformidadEstandar()
	{
		return $this->rum_tc_uniformidad_estandar;
	}

	/**
	 * Set the value of [rum_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_codigo !== $v) {
			$this->rum_codigo = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_CODIGO;
		}

		return $this;
	} // setRumCodigo()

	/**
	 * Set the value of [rum_maq_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumMaqCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_maq_codigo !== $v) {
			$this->rum_maq_codigo = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO;
		}

		return $this;
	} // setRumMaqCodigo()

	/**
	 * Set the value of [rum_met_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumMetCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_met_codigo !== $v) {
			$this->rum_met_codigo = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_MET_CODIGO;
		}

		return $this;
	} // setRumMetCodigo()

	/**
	 * Set the value of [rum_usu_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumUsuCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_usu_codigo !== $v) {
			$this->rum_usu_codigo = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_USU_CODIGO;
		}

		return $this;
	} // setRumUsuCodigo()

	/**
	 * Set the value of [rum_usu_codigo_elimino] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumUsuCodigoElimino($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_usu_codigo_elimino !== $v) {
			$this->rum_usu_codigo_elimino = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO;
		}

		return $this;
	} // setRumUsuCodigoElimino()

	/**
	 * Sets the value of [rum_hora_inicio_trabajo] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumHoraInicioTrabajo($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_hora_inicio_trabajo !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_hora_inicio_trabajo !== null && $tmpDt = new DateTime($this->rum_hora_inicio_trabajo)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_hora_inicio_trabajo = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_HORA_INICIO_TRABAJO;
			}
		} // if either are not null

		return $this;
	} // setRumHoraInicioTrabajo()

	/**
	 * Sets the value of [rum_hora_fin_trabajo] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumHoraFinTrabajo($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_hora_fin_trabajo !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_hora_fin_trabajo !== null && $tmpDt = new DateTime($this->rum_hora_fin_trabajo)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_hora_fin_trabajo = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_HORA_FIN_TRABAJO;
			}
		} // if either are not null

		return $this;
	} // setRumHoraFinTrabajo()

	/**
	 * Sets the value of [rum_tiempo_entre_modelo] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoEntreModelo($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_tiempo_entre_modelo !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_tiempo_entre_modelo !== null && $tmpDt = new DateTime($this->rum_tiempo_entre_modelo)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_tiempo_entre_modelo = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO;
			}
		} // if either are not null

		return $this;
	} // setRumTiempoEntreModelo()

	/**
	 * Set the value of [rum_tiempo_cambio_modelo] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoCambioModelo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tiempo_cambio_modelo !== $v) {
			$this->rum_tiempo_cambio_modelo = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_CAMBIO_MODELO;
		}

		return $this;
	} // setRumTiempoCambioModelo()

	/**
	 * Set the value of [rum_tiempo_corrida_sistema] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoCorridaSistema($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tiempo_corrida_sistema !== $v) {
			$this->rum_tiempo_corrida_sistema = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_SISTEMA;
		}

		return $this;
	} // setRumTiempoCorridaSistema()

	/**
	 * Set the value of [rum_tiempo_corrida_curvas] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoCorridaCurvas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tiempo_corrida_curvas !== $v) {
			$this->rum_tiempo_corrida_curvas = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_CURVAS;
		}

		return $this;
	} // setRumTiempoCorridaCurvas()

	/**
	 * Set the value of [rum_tiempo_corrida_sistema_est] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoCorridaSistemaEst($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tiempo_corrida_sistema_est !== $v) {
			$this->rum_tiempo_corrida_sistema_est = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_SISTEMA_EST;
		}

		return $this;
	} // setRumTiempoCorridaSistemaEst()

	/**
	 * Set the value of [rum_tiempo_corrida_curvas_esta] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoCorridaCurvasEsta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tiempo_corrida_curvas_esta !== $v) {
			$this->rum_tiempo_corrida_curvas_esta = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_CURVAS_ESTA;
		}

		return $this;
	} // setRumTiempoCorridaCurvasEsta()

	/**
	 * Set the value of [rum_num_inyeccion_estandar_per] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandarPer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar_per !== $v) {
			$this->rum_num_inyeccion_estandar_per = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR_PER;
		}

		return $this;
	} // setRumNumInyeccionEstandarPer()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar !== $v) {
			$this->rum_numero_inyeccion_estandar = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar()

	/**
	 * Set the value of [rum_tiempo_preparacion] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoPreparacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tiempo_preparacion !== $v) {
			$this->rum_tiempo_preparacion = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_PREPARACION;
		}

		return $this;
	} // setRumTiempoPreparacion()

	/**
	 * Sets the value of [rum_tiempo_duracion_ciclo] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTiempoDuracionCiclo($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_tiempo_duracion_ciclo !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_tiempo_duracion_ciclo !== null && $tmpDt = new DateTime($this->rum_tiempo_duracion_ciclo)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_tiempo_duracion_ciclo = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TIEMPO_DURACION_CICLO;
			}
		} // if either are not null

		return $this;
	} // setRumTiempoDuracionCiclo()

	/**
	 * Set the value of [rum_numero_corridas] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroCorridas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_numero_corridas !== $v) {
			$this->rum_numero_corridas = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_CORRIDAS;
		}

		return $this;
	} // setRumNumeroCorridas()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar1] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar1 !== $v) {
			$this->rum_numero_inyeccion_estandar1 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR1;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar1()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar2] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar2 !== $v) {
			$this->rum_numero_inyeccion_estandar2 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR2;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar2()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar3] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar3 !== $v) {
			$this->rum_numero_inyeccion_estandar3 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR3;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar3()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar4] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar4 !== $v) {
			$this->rum_numero_inyeccion_estandar4 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR4;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar4()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar5] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar5 !== $v) {
			$this->rum_numero_inyeccion_estandar5 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR5;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar5()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar6] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar6 !== $v) {
			$this->rum_numero_inyeccion_estandar6 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR6;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar6()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar7] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar7 !== $v) {
			$this->rum_numero_inyeccion_estandar7 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR7;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar7()

	/**
	 * Set the value of [rum_numero_inyeccion_estandar8] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumeroInyeccionEstandar8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_numero_inyeccion_estandar8 !== $v) {
			$this->rum_numero_inyeccion_estandar8 = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR8;
		}

		return $this;
	} // setRumNumeroInyeccionEstandar8()

	/**
	 * Set the value of [rum_num_inyeccion_estandar1_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar1Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar1_pe !== $v) {
			$this->rum_num_inyeccion_estandar1_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR1_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar1Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar2_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar2Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar2_pe !== $v) {
			$this->rum_num_inyeccion_estandar2_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR2_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar2Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar3_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar3Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar3_pe !== $v) {
			$this->rum_num_inyeccion_estandar3_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR3_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar3Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar4_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar4Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar4_pe !== $v) {
			$this->rum_num_inyeccion_estandar4_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR4_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar4Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar5_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar5Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar5_pe !== $v) {
			$this->rum_num_inyeccion_estandar5_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR5_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar5Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar6_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar6Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar6_pe !== $v) {
			$this->rum_num_inyeccion_estandar6_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR6_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar6Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar7_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar7Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar7_pe !== $v) {
			$this->rum_num_inyeccion_estandar7_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR7_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar7Pe()

	/**
	 * Set the value of [rum_num_inyeccion_estandar8_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyeccionEstandar8Pe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyeccion_estandar8_pe !== $v) {
			$this->rum_num_inyeccion_estandar8_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR8_PE;
		}

		return $this;
	} // setRumNumInyeccionEstandar8Pe()

	/**
	 * Set the value of [rum_num_muestras_producto] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasProducto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_producto !== $v) {
			$this->rum_num_muestras_producto = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PRODUCTO;
		}

		return $this;
	} // setRumNumMuestrasProducto()

	/**
	 * Set the value of [rum_num_muestras_estabilidad] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasEstabilidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_estabilidad !== $v) {
			$this->rum_num_muestras_estabilidad = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_ESTABILIDAD;
		}

		return $this;
	} // setRumNumMuestrasEstabilidad()

	/**
	 * Set the value of [rum_num_muestras_materia_prima] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasMateriaPrima($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_materia_prima !== $v) {
			$this->rum_num_muestras_materia_prima = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_MATERIA_PRIMA;
		}

		return $this;
	} // setRumNumMuestrasMateriaPrima()

	/**
	 * Set the value of [rum_num_muestras_pureza] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasPureza($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_pureza !== $v) {
			$this->rum_num_muestras_pureza = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PUREZA;
		}

		return $this;
	} // setRumNumMuestrasPureza()

	/**
	 * Set the value of [rum_num_muestras_disolucion] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasDisolucion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_disolucion !== $v) {
			$this->rum_num_muestras_disolucion = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_DISOLUCION;
		}

		return $this;
	} // setRumNumMuestrasDisolucion()

	/**
	 * Set the value of [rum_num_muestras_uniformidad] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasUniformidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_uniformidad !== $v) {
			$this->rum_num_muestras_uniformidad = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_UNIFORMIDAD;
		}

		return $this;
	} // setRumNumMuestrasUniformidad()

	/**
	 * Set the value of [rum_num_mu_producto_perdida] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuProductoPerdida($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_mu_producto_perdida !== $v) {
			$this->rum_num_mu_producto_perdida = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MU_PRODUCTO_PERDIDA;
		}

		return $this;
	} // setRumNumMuProductoPerdida()

	/**
	 * Set the value of [rum_num_mu_estabilidad_perdida] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuEstabilidadPerdida($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_mu_estabilidad_perdida !== $v) {
			$this->rum_num_mu_estabilidad_perdida = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MU_ESTABILIDAD_PERDIDA;
		}

		return $this;
	} // setRumNumMuEstabilidadPerdida()

	/**
	 * Set the value of [rum_num_mu_materia_prima_perdi] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuMateriaPrimaPerdi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_mu_materia_prima_perdi !== $v) {
			$this->rum_num_mu_materia_prima_perdi = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MU_MATERIA_PRIMA_PERDI;
		}

		return $this;
	} // setRumNumMuMateriaPrimaPerdi()

	/**
	 * Set the value of [rum_num_muestras_pureza_perdid] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasPurezaPerdid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_pureza_perdid !== $v) {
			$this->rum_num_muestras_pureza_perdid = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PUREZA_PERDID;
		}

		return $this;
	} // setRumNumMuestrasPurezaPerdid()

	/**
	 * Set the value of [rum_num_muestras_disolucion_pe] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasDisolucionPe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_disolucion_pe !== $v) {
			$this->rum_num_muestras_disolucion_pe = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_DISOLUCION_PE;
		}

		return $this;
	} // setRumNumMuestrasDisolucionPe()

	/**
	 * Set the value of [rum_num_muestras_uniformidad_p] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumMuestrasUniformidadP($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_muestras_uniformidad_p !== $v) {
			$this->rum_num_muestras_uniformidad_p = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_UNIFORMIDAD_P;
		}

		return $this;
	} // setRumNumMuestrasUniformidadP()

	/**
	 * Set the value of [rum_num_inyec_x_muestra_estabi] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuestraEstabi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_muestra_estabi !== $v) {
			$this->rum_num_inyec_x_muestra_estabi = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_ESTABI;
		}

		return $this;
	} // setRumNumInyecXMuestraEstabi()

	/**
	 * Set the value of [rum_num_inyec_x_muestra_produc] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuestraProduc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_muestra_produc !== $v) {
			$this->rum_num_inyec_x_muestra_produc = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_PRODUC;
		}

		return $this;
	} // setRumNumInyecXMuestraProduc()

	/**
	 * Set the value of [rum_num_inyec_x_muestra_materi] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuestraMateri($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_muestra_materi !== $v) {
			$this->rum_num_inyec_x_muestra_materi = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_MATERI;
		}

		return $this;
	} // setRumNumInyecXMuestraMateri()

	/**
	 * Set the value of [rum_num_inyec_x_muestra_pureza] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuestraPureza($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_muestra_pureza !== $v) {
			$this->rum_num_inyec_x_muestra_pureza = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_PUREZA;
		}

		return $this;
	} // setRumNumInyecXMuestraPureza()

	/**
	 * Set the value of [rum_num_inyec_x_muestra_disolu] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuestraDisolu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_muestra_disolu !== $v) {
			$this->rum_num_inyec_x_muestra_disolu = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_DISOLU;
		}

		return $this;
	} // setRumNumInyecXMuestraDisolu()

	/**
	 * Set the value of [rum_num_inyec_x_muestra_unifor] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuestraUnifor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_muestra_unifor !== $v) {
			$this->rum_num_inyec_x_muestra_unifor = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_UNIFOR;
		}

		return $this;
	} // setRumNumInyecXMuestraUnifor()

	/**
	 * Set the value of [rum_num_inyec_x_mu_estabi_perd] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuEstabiPerd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_mu_estabi_perd !== $v) {
			$this->rum_num_inyec_x_mu_estabi_perd = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_ESTABI_PERD;
		}

		return $this;
	} // setRumNumInyecXMuEstabiPerd()

	/**
	 * Set the value of [rum_num_inyec_x_mu_produc_perd] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuProducPerd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_mu_produc_perd !== $v) {
			$this->rum_num_inyec_x_mu_produc_perd = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_PRODUC_PERD;
		}

		return $this;
	} // setRumNumInyecXMuProducPerd()

	/**
	 * Set the value of [rum_num_inyec_x_mu_materi_perd] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuMateriPerd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_mu_materi_perd !== $v) {
			$this->rum_num_inyec_x_mu_materi_perd = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_MATERI_PERD;
		}

		return $this;
	} // setRumNumInyecXMuMateriPerd()

	/**
	 * Set the value of [rum_num_inyec_x_mu_pureza_perd] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuPurezaPerd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_mu_pureza_perd !== $v) {
			$this->rum_num_inyec_x_mu_pureza_perd = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_PUREZA_PERD;
		}

		return $this;
	} // setRumNumInyecXMuPurezaPerd()

	/**
	 * Set the value of [rum_num_inyec_x_mu_disolu_perd] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuDisoluPerd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_mu_disolu_perd !== $v) {
			$this->rum_num_inyec_x_mu_disolu_perd = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_DISOLU_PERD;
		}

		return $this;
	} // setRumNumInyecXMuDisoluPerd()

	/**
	 * Set the value of [rum_num_inyec_x_mu_unifor_perd] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumNumInyecXMuUniforPerd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_num_inyec_x_mu_unifor_perd !== $v) {
			$this->rum_num_inyec_x_mu_unifor_perd = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_UNIFOR_PERD;
		}

		return $this;
	} // setRumNumInyecXMuUniforPerd()

	/**
	 * Set the value of [rum_fallas] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumFallas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_fallas !== $v) {
			$this->rum_fallas = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_FALLAS;
		}

		return $this;
	} // setRumFallas()

	/**
	 * Set the value of [rum_observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_observaciones !== $v) {
			$this->rum_observaciones = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_OBSERVACIONES;
		}

		return $this;
	} // setRumObservaciones()

	/**
	 * Sets the value of [rum_fecha] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumFecha($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_fecha !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_fecha !== null && $tmpDt = new DateTime($this->rum_fecha)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_fecha = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_FECHA;
			}
		} // if either are not null

		return $this;
	} // setRumFecha()

	/**
	 * Sets the value of [rum_fecha_hora_reg_sistema] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumFechaHoraRegSistema($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_fecha_hora_reg_sistema !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_fecha_hora_reg_sistema !== null && $tmpDt = new DateTime($this->rum_fecha_hora_reg_sistema)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_fecha_hora_reg_sistema = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_FECHA_HORA_REG_SISTEMA;
			}
		} // if either are not null

		return $this;
	} // setRumFechaHoraRegSistema()

	/**
	 * Set the value of [rum_causa_eliminacion] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumCausaEliminacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_causa_eliminacion !== $v) {
			$this->rum_causa_eliminacion = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_CAUSA_ELIMINACION;
		}

		return $this;
	} // setRumCausaEliminacion()

	/**
	 * Sets the value of [rum_fecha_hora_elim_sistema] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumFechaHoraElimSistema($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->rum_fecha_hora_elim_sistema !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->rum_fecha_hora_elim_sistema !== null && $tmpDt = new DateTime($this->rum_fecha_hora_elim_sistema)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->rum_fecha_hora_elim_sistema = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_FECHA_HORA_ELIM_SISTEMA;
			}
		} // if either are not null

		return $this;
	} // setRumFechaHoraElimSistema()

	/**
	 * Set the value of [rum_eliminado] column.
	 * 
	 * @param      int $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumEliminado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rum_eliminado !== $v) {
			$this->rum_eliminado = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_ELIMINADO;
		}

		return $this;
	} // setRumEliminado()

	/**
	 * Set the value of [rum_tc_producto_terminado] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcProductoTerminado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_producto_terminado !== $v) {
			$this->rum_tc_producto_terminado = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_PRODUCTO_TERMINADO;
		}

		return $this;
	} // setRumTcProductoTerminado()

	/**
	 * Set the value of [rum_tc_estabilidad] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcEstabilidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_estabilidad !== $v) {
			$this->rum_tc_estabilidad = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_ESTABILIDAD;
		}

		return $this;
	} // setRumTcEstabilidad()

	/**
	 * Set the value of [rum_tc_materia_prima] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcMateriaPrima($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_materia_prima !== $v) {
			$this->rum_tc_materia_prima = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_MATERIA_PRIMA;
		}

		return $this;
	} // setRumTcMateriaPrima()

	/**
	 * Set the value of [rum_tc_pureza] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcPureza($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_pureza !== $v) {
			$this->rum_tc_pureza = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_PUREZA;
		}

		return $this;
	} // setRumTcPureza()

	/**
	 * Set the value of [rum_tc_disolucion] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcDisolucion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_disolucion !== $v) {
			$this->rum_tc_disolucion = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_DISOLUCION;
		}

		return $this;
	} // setRumTcDisolucion()

	/**
	 * Set the value of [rum_tc_uniformidad] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcUniformidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_uniformidad !== $v) {
			$this->rum_tc_uniformidad = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_UNIFORMIDAD;
		}

		return $this;
	} // setRumTcUniformidad()

	/**
	 * Set the value of [rum_tc_producto_terminado_esta] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcProductoTerminadoEsta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_producto_terminado_esta !== $v) {
			$this->rum_tc_producto_terminado_esta = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_PRODUCTO_TERMINADO_ESTA;
		}

		return $this;
	} // setRumTcProductoTerminadoEsta()

	/**
	 * Set the value of [rum_tc_estabilidad_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcEstabilidadEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_estabilidad_estandar !== $v) {
			$this->rum_tc_estabilidad_estandar = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_ESTABILIDAD_ESTANDAR;
		}

		return $this;
	} // setRumTcEstabilidadEstandar()

	/**
	 * Set the value of [rum_tc_materia_prima_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcMateriaPrimaEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_materia_prima_estandar !== $v) {
			$this->rum_tc_materia_prima_estandar = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_MATERIA_PRIMA_ESTANDAR;
		}

		return $this;
	} // setRumTcMateriaPrimaEstandar()

	/**
	 * Set the value of [rum_tc_pureza_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcPurezaEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_pureza_estandar !== $v) {
			$this->rum_tc_pureza_estandar = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_PUREZA_ESTANDAR;
		}

		return $this;
	} // setRumTcPurezaEstandar()

	/**
	 * Set the value of [rum_tc_disolucion_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcDisolucionEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_disolucion_estandar !== $v) {
			$this->rum_tc_disolucion_estandar = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_DISOLUCION_ESTANDAR;
		}

		return $this;
	} // setRumTcDisolucionEstandar()

	/**
	 * Set the value of [rum_tc_uniformidad_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     RegistroUsoMaquina The current object (for fluent API support)
	 */
	public function setRumTcUniformidadEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rum_tc_uniformidad_estandar !== $v) {
			$this->rum_tc_uniformidad_estandar = $v;
			$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_TC_UNIFORMIDAD_ESTANDAR;
		}

		return $this;
	} // setRumTcUniformidadEstandar()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->rum_codigo = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->rum_maq_codigo = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->rum_met_codigo = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->rum_usu_codigo = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->rum_usu_codigo_elimino = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->rum_hora_inicio_trabajo = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->rum_hora_fin_trabajo = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->rum_tiempo_entre_modelo = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->rum_tiempo_cambio_modelo = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->rum_tiempo_corrida_sistema = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->rum_tiempo_corrida_curvas = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->rum_tiempo_corrida_sistema_est = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->rum_tiempo_corrida_curvas_esta = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->rum_num_inyeccion_estandar_per = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->rum_numero_inyeccion_estandar = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->rum_tiempo_preparacion = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->rum_tiempo_duracion_ciclo = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->rum_numero_corridas = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->rum_numero_inyeccion_estandar1 = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->rum_numero_inyeccion_estandar2 = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->rum_numero_inyeccion_estandar3 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->rum_numero_inyeccion_estandar4 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->rum_numero_inyeccion_estandar5 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->rum_numero_inyeccion_estandar6 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->rum_numero_inyeccion_estandar7 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->rum_numero_inyeccion_estandar8 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->rum_num_inyeccion_estandar1_pe = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->rum_num_inyeccion_estandar2_pe = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->rum_num_inyeccion_estandar3_pe = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->rum_num_inyeccion_estandar4_pe = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->rum_num_inyeccion_estandar5_pe = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->rum_num_inyeccion_estandar6_pe = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->rum_num_inyeccion_estandar7_pe = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->rum_num_inyeccion_estandar8_pe = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->rum_num_muestras_producto = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->rum_num_muestras_estabilidad = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->rum_num_muestras_materia_prima = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->rum_num_muestras_pureza = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->rum_num_muestras_disolucion = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->rum_num_muestras_uniformidad = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->rum_num_mu_producto_perdida = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->rum_num_mu_estabilidad_perdida = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->rum_num_mu_materia_prima_perdi = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->rum_num_muestras_pureza_perdid = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->rum_num_muestras_disolucion_pe = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->rum_num_muestras_uniformidad_p = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->rum_num_inyec_x_muestra_estabi = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->rum_num_inyec_x_muestra_produc = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->rum_num_inyec_x_muestra_materi = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->rum_num_inyec_x_muestra_pureza = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->rum_num_inyec_x_muestra_disolu = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->rum_num_inyec_x_muestra_unifor = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->rum_num_inyec_x_mu_estabi_perd = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
			$this->rum_num_inyec_x_mu_produc_perd = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->rum_num_inyec_x_mu_materi_perd = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->rum_num_inyec_x_mu_pureza_perd = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->rum_num_inyec_x_mu_disolu_perd = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->rum_num_inyec_x_mu_unifor_perd = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
			$this->rum_fallas = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->rum_observaciones = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->rum_fecha = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
			$this->rum_fecha_hora_reg_sistema = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
			$this->rum_causa_eliminacion = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
			$this->rum_fecha_hora_elim_sistema = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
			$this->rum_eliminado = ($row[$startcol + 64] !== null) ? (int) $row[$startcol + 64] : null;
			$this->rum_tc_producto_terminado = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->rum_tc_estabilidad = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->rum_tc_materia_prima = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
			$this->rum_tc_pureza = ($row[$startcol + 68] !== null) ? (string) $row[$startcol + 68] : null;
			$this->rum_tc_disolucion = ($row[$startcol + 69] !== null) ? (string) $row[$startcol + 69] : null;
			$this->rum_tc_uniformidad = ($row[$startcol + 70] !== null) ? (string) $row[$startcol + 70] : null;
			$this->rum_tc_producto_terminado_esta = ($row[$startcol + 71] !== null) ? (string) $row[$startcol + 71] : null;
			$this->rum_tc_estabilidad_estandar = ($row[$startcol + 72] !== null) ? (string) $row[$startcol + 72] : null;
			$this->rum_tc_materia_prima_estandar = ($row[$startcol + 73] !== null) ? (string) $row[$startcol + 73] : null;
			$this->rum_tc_pureza_estandar = ($row[$startcol + 74] !== null) ? (string) $row[$startcol + 74] : null;
			$this->rum_tc_disolucion_estandar = ($row[$startcol + 75] !== null) ? (string) $row[$startcol + 75] : null;
			$this->rum_tc_uniformidad_estandar = ($row[$startcol + 76] !== null) ? (string) $row[$startcol + 76] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 77; // 77 = RegistroUsoMaquinaPeer::NUM_COLUMNS - RegistroUsoMaquinaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RegistroUsoMaquina object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RegistroUsoMaquinaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RegistroUsoMaquinaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RegistroUsoMaquinaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseRegistroUsoMaquina:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				RegistroUsoMaquinaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseRegistroUsoMaquina:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RegistroUsoMaquinaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseRegistroUsoMaquina:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseRegistroUsoMaquina:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				RegistroUsoMaquinaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RegistroUsoMaquinaPeer::RUM_CODIGO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RegistroUsoMaquinaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setRumCodigo($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RegistroUsoMaquinaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RegistroUsoMaquinaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RegistroUsoMaquinaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getRumCodigo();
				break;
			case 1:
				return $this->getRumMaqCodigo();
				break;
			case 2:
				return $this->getRumMetCodigo();
				break;
			case 3:
				return $this->getRumUsuCodigo();
				break;
			case 4:
				return $this->getRumUsuCodigoElimino();
				break;
			case 5:
				return $this->getRumHoraInicioTrabajo();
				break;
			case 6:
				return $this->getRumHoraFinTrabajo();
				break;
			case 7:
				return $this->getRumTiempoEntreModelo();
				break;
			case 8:
				return $this->getRumTiempoCambioModelo();
				break;
			case 9:
				return $this->getRumTiempoCorridaSistema();
				break;
			case 10:
				return $this->getRumTiempoCorridaCurvas();
				break;
			case 11:
				return $this->getRumTiempoCorridaSistemaEst();
				break;
			case 12:
				return $this->getRumTiempoCorridaCurvasEsta();
				break;
			case 13:
				return $this->getRumNumInyeccionEstandarPer();
				break;
			case 14:
				return $this->getRumNumeroInyeccionEstandar();
				break;
			case 15:
				return $this->getRumTiempoPreparacion();
				break;
			case 16:
				return $this->getRumTiempoDuracionCiclo();
				break;
			case 17:
				return $this->getRumNumeroCorridas();
				break;
			case 18:
				return $this->getRumNumeroInyeccionEstandar1();
				break;
			case 19:
				return $this->getRumNumeroInyeccionEstandar2();
				break;
			case 20:
				return $this->getRumNumeroInyeccionEstandar3();
				break;
			case 21:
				return $this->getRumNumeroInyeccionEstandar4();
				break;
			case 22:
				return $this->getRumNumeroInyeccionEstandar5();
				break;
			case 23:
				return $this->getRumNumeroInyeccionEstandar6();
				break;
			case 24:
				return $this->getRumNumeroInyeccionEstandar7();
				break;
			case 25:
				return $this->getRumNumeroInyeccionEstandar8();
				break;
			case 26:
				return $this->getRumNumInyeccionEstandar1Pe();
				break;
			case 27:
				return $this->getRumNumInyeccionEstandar2Pe();
				break;
			case 28:
				return $this->getRumNumInyeccionEstandar3Pe();
				break;
			case 29:
				return $this->getRumNumInyeccionEstandar4Pe();
				break;
			case 30:
				return $this->getRumNumInyeccionEstandar5Pe();
				break;
			case 31:
				return $this->getRumNumInyeccionEstandar6Pe();
				break;
			case 32:
				return $this->getRumNumInyeccionEstandar7Pe();
				break;
			case 33:
				return $this->getRumNumInyeccionEstandar8Pe();
				break;
			case 34:
				return $this->getRumNumMuestrasProducto();
				break;
			case 35:
				return $this->getRumNumMuestrasEstabilidad();
				break;
			case 36:
				return $this->getRumNumMuestrasMateriaPrima();
				break;
			case 37:
				return $this->getRumNumMuestrasPureza();
				break;
			case 38:
				return $this->getRumNumMuestrasDisolucion();
				break;
			case 39:
				return $this->getRumNumMuestrasUniformidad();
				break;
			case 40:
				return $this->getRumNumMuProductoPerdida();
				break;
			case 41:
				return $this->getRumNumMuEstabilidadPerdida();
				break;
			case 42:
				return $this->getRumNumMuMateriaPrimaPerdi();
				break;
			case 43:
				return $this->getRumNumMuestrasPurezaPerdid();
				break;
			case 44:
				return $this->getRumNumMuestrasDisolucionPe();
				break;
			case 45:
				return $this->getRumNumMuestrasUniformidadP();
				break;
			case 46:
				return $this->getRumNumInyecXMuestraEstabi();
				break;
			case 47:
				return $this->getRumNumInyecXMuestraProduc();
				break;
			case 48:
				return $this->getRumNumInyecXMuestraMateri();
				break;
			case 49:
				return $this->getRumNumInyecXMuestraPureza();
				break;
			case 50:
				return $this->getRumNumInyecXMuestraDisolu();
				break;
			case 51:
				return $this->getRumNumInyecXMuestraUnifor();
				break;
			case 52:
				return $this->getRumNumInyecXMuEstabiPerd();
				break;
			case 53:
				return $this->getRumNumInyecXMuProducPerd();
				break;
			case 54:
				return $this->getRumNumInyecXMuMateriPerd();
				break;
			case 55:
				return $this->getRumNumInyecXMuPurezaPerd();
				break;
			case 56:
				return $this->getRumNumInyecXMuDisoluPerd();
				break;
			case 57:
				return $this->getRumNumInyecXMuUniforPerd();
				break;
			case 58:
				return $this->getRumFallas();
				break;
			case 59:
				return $this->getRumObservaciones();
				break;
			case 60:
				return $this->getRumFecha();
				break;
			case 61:
				return $this->getRumFechaHoraRegSistema();
				break;
			case 62:
				return $this->getRumCausaEliminacion();
				break;
			case 63:
				return $this->getRumFechaHoraElimSistema();
				break;
			case 64:
				return $this->getRumEliminado();
				break;
			case 65:
				return $this->getRumTcProductoTerminado();
				break;
			case 66:
				return $this->getRumTcEstabilidad();
				break;
			case 67:
				return $this->getRumTcMateriaPrima();
				break;
			case 68:
				return $this->getRumTcPureza();
				break;
			case 69:
				return $this->getRumTcDisolucion();
				break;
			case 70:
				return $this->getRumTcUniformidad();
				break;
			case 71:
				return $this->getRumTcProductoTerminadoEsta();
				break;
			case 72:
				return $this->getRumTcEstabilidadEstandar();
				break;
			case 73:
				return $this->getRumTcMateriaPrimaEstandar();
				break;
			case 74:
				return $this->getRumTcPurezaEstandar();
				break;
			case 75:
				return $this->getRumTcDisolucionEstandar();
				break;
			case 76:
				return $this->getRumTcUniformidadEstandar();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RegistroUsoMaquinaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getRumCodigo(),
			$keys[1] => $this->getRumMaqCodigo(),
			$keys[2] => $this->getRumMetCodigo(),
			$keys[3] => $this->getRumUsuCodigo(),
			$keys[4] => $this->getRumUsuCodigoElimino(),
			$keys[5] => $this->getRumHoraInicioTrabajo(),
			$keys[6] => $this->getRumHoraFinTrabajo(),
			$keys[7] => $this->getRumTiempoEntreModelo(),
			$keys[8] => $this->getRumTiempoCambioModelo(),
			$keys[9] => $this->getRumTiempoCorridaSistema(),
			$keys[10] => $this->getRumTiempoCorridaCurvas(),
			$keys[11] => $this->getRumTiempoCorridaSistemaEst(),
			$keys[12] => $this->getRumTiempoCorridaCurvasEsta(),
			$keys[13] => $this->getRumNumInyeccionEstandarPer(),
			$keys[14] => $this->getRumNumeroInyeccionEstandar(),
			$keys[15] => $this->getRumTiempoPreparacion(),
			$keys[16] => $this->getRumTiempoDuracionCiclo(),
			$keys[17] => $this->getRumNumeroCorridas(),
			$keys[18] => $this->getRumNumeroInyeccionEstandar1(),
			$keys[19] => $this->getRumNumeroInyeccionEstandar2(),
			$keys[20] => $this->getRumNumeroInyeccionEstandar3(),
			$keys[21] => $this->getRumNumeroInyeccionEstandar4(),
			$keys[22] => $this->getRumNumeroInyeccionEstandar5(),
			$keys[23] => $this->getRumNumeroInyeccionEstandar6(),
			$keys[24] => $this->getRumNumeroInyeccionEstandar7(),
			$keys[25] => $this->getRumNumeroInyeccionEstandar8(),
			$keys[26] => $this->getRumNumInyeccionEstandar1Pe(),
			$keys[27] => $this->getRumNumInyeccionEstandar2Pe(),
			$keys[28] => $this->getRumNumInyeccionEstandar3Pe(),
			$keys[29] => $this->getRumNumInyeccionEstandar4Pe(),
			$keys[30] => $this->getRumNumInyeccionEstandar5Pe(),
			$keys[31] => $this->getRumNumInyeccionEstandar6Pe(),
			$keys[32] => $this->getRumNumInyeccionEstandar7Pe(),
			$keys[33] => $this->getRumNumInyeccionEstandar8Pe(),
			$keys[34] => $this->getRumNumMuestrasProducto(),
			$keys[35] => $this->getRumNumMuestrasEstabilidad(),
			$keys[36] => $this->getRumNumMuestrasMateriaPrima(),
			$keys[37] => $this->getRumNumMuestrasPureza(),
			$keys[38] => $this->getRumNumMuestrasDisolucion(),
			$keys[39] => $this->getRumNumMuestrasUniformidad(),
			$keys[40] => $this->getRumNumMuProductoPerdida(),
			$keys[41] => $this->getRumNumMuEstabilidadPerdida(),
			$keys[42] => $this->getRumNumMuMateriaPrimaPerdi(),
			$keys[43] => $this->getRumNumMuestrasPurezaPerdid(),
			$keys[44] => $this->getRumNumMuestrasDisolucionPe(),
			$keys[45] => $this->getRumNumMuestrasUniformidadP(),
			$keys[46] => $this->getRumNumInyecXMuestraEstabi(),
			$keys[47] => $this->getRumNumInyecXMuestraProduc(),
			$keys[48] => $this->getRumNumInyecXMuestraMateri(),
			$keys[49] => $this->getRumNumInyecXMuestraPureza(),
			$keys[50] => $this->getRumNumInyecXMuestraDisolu(),
			$keys[51] => $this->getRumNumInyecXMuestraUnifor(),
			$keys[52] => $this->getRumNumInyecXMuEstabiPerd(),
			$keys[53] => $this->getRumNumInyecXMuProducPerd(),
			$keys[54] => $this->getRumNumInyecXMuMateriPerd(),
			$keys[55] => $this->getRumNumInyecXMuPurezaPerd(),
			$keys[56] => $this->getRumNumInyecXMuDisoluPerd(),
			$keys[57] => $this->getRumNumInyecXMuUniforPerd(),
			$keys[58] => $this->getRumFallas(),
			$keys[59] => $this->getRumObservaciones(),
			$keys[60] => $this->getRumFecha(),
			$keys[61] => $this->getRumFechaHoraRegSistema(),
			$keys[62] => $this->getRumCausaEliminacion(),
			$keys[63] => $this->getRumFechaHoraElimSistema(),
			$keys[64] => $this->getRumEliminado(),
			$keys[65] => $this->getRumTcProductoTerminado(),
			$keys[66] => $this->getRumTcEstabilidad(),
			$keys[67] => $this->getRumTcMateriaPrima(),
			$keys[68] => $this->getRumTcPureza(),
			$keys[69] => $this->getRumTcDisolucion(),
			$keys[70] => $this->getRumTcUniformidad(),
			$keys[71] => $this->getRumTcProductoTerminadoEsta(),
			$keys[72] => $this->getRumTcEstabilidadEstandar(),
			$keys[73] => $this->getRumTcMateriaPrimaEstandar(),
			$keys[74] => $this->getRumTcPurezaEstandar(),
			$keys[75] => $this->getRumTcDisolucionEstandar(),
			$keys[76] => $this->getRumTcUniformidadEstandar(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RegistroUsoMaquinaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setRumCodigo($value);
				break;
			case 1:
				$this->setRumMaqCodigo($value);
				break;
			case 2:
				$this->setRumMetCodigo($value);
				break;
			case 3:
				$this->setRumUsuCodigo($value);
				break;
			case 4:
				$this->setRumUsuCodigoElimino($value);
				break;
			case 5:
				$this->setRumHoraInicioTrabajo($value);
				break;
			case 6:
				$this->setRumHoraFinTrabajo($value);
				break;
			case 7:
				$this->setRumTiempoEntreModelo($value);
				break;
			case 8:
				$this->setRumTiempoCambioModelo($value);
				break;
			case 9:
				$this->setRumTiempoCorridaSistema($value);
				break;
			case 10:
				$this->setRumTiempoCorridaCurvas($value);
				break;
			case 11:
				$this->setRumTiempoCorridaSistemaEst($value);
				break;
			case 12:
				$this->setRumTiempoCorridaCurvasEsta($value);
				break;
			case 13:
				$this->setRumNumInyeccionEstandarPer($value);
				break;
			case 14:
				$this->setRumNumeroInyeccionEstandar($value);
				break;
			case 15:
				$this->setRumTiempoPreparacion($value);
				break;
			case 16:
				$this->setRumTiempoDuracionCiclo($value);
				break;
			case 17:
				$this->setRumNumeroCorridas($value);
				break;
			case 18:
				$this->setRumNumeroInyeccionEstandar1($value);
				break;
			case 19:
				$this->setRumNumeroInyeccionEstandar2($value);
				break;
			case 20:
				$this->setRumNumeroInyeccionEstandar3($value);
				break;
			case 21:
				$this->setRumNumeroInyeccionEstandar4($value);
				break;
			case 22:
				$this->setRumNumeroInyeccionEstandar5($value);
				break;
			case 23:
				$this->setRumNumeroInyeccionEstandar6($value);
				break;
			case 24:
				$this->setRumNumeroInyeccionEstandar7($value);
				break;
			case 25:
				$this->setRumNumeroInyeccionEstandar8($value);
				break;
			case 26:
				$this->setRumNumInyeccionEstandar1Pe($value);
				break;
			case 27:
				$this->setRumNumInyeccionEstandar2Pe($value);
				break;
			case 28:
				$this->setRumNumInyeccionEstandar3Pe($value);
				break;
			case 29:
				$this->setRumNumInyeccionEstandar4Pe($value);
				break;
			case 30:
				$this->setRumNumInyeccionEstandar5Pe($value);
				break;
			case 31:
				$this->setRumNumInyeccionEstandar6Pe($value);
				break;
			case 32:
				$this->setRumNumInyeccionEstandar7Pe($value);
				break;
			case 33:
				$this->setRumNumInyeccionEstandar8Pe($value);
				break;
			case 34:
				$this->setRumNumMuestrasProducto($value);
				break;
			case 35:
				$this->setRumNumMuestrasEstabilidad($value);
				break;
			case 36:
				$this->setRumNumMuestrasMateriaPrima($value);
				break;
			case 37:
				$this->setRumNumMuestrasPureza($value);
				break;
			case 38:
				$this->setRumNumMuestrasDisolucion($value);
				break;
			case 39:
				$this->setRumNumMuestrasUniformidad($value);
				break;
			case 40:
				$this->setRumNumMuProductoPerdida($value);
				break;
			case 41:
				$this->setRumNumMuEstabilidadPerdida($value);
				break;
			case 42:
				$this->setRumNumMuMateriaPrimaPerdi($value);
				break;
			case 43:
				$this->setRumNumMuestrasPurezaPerdid($value);
				break;
			case 44:
				$this->setRumNumMuestrasDisolucionPe($value);
				break;
			case 45:
				$this->setRumNumMuestrasUniformidadP($value);
				break;
			case 46:
				$this->setRumNumInyecXMuestraEstabi($value);
				break;
			case 47:
				$this->setRumNumInyecXMuestraProduc($value);
				break;
			case 48:
				$this->setRumNumInyecXMuestraMateri($value);
				break;
			case 49:
				$this->setRumNumInyecXMuestraPureza($value);
				break;
			case 50:
				$this->setRumNumInyecXMuestraDisolu($value);
				break;
			case 51:
				$this->setRumNumInyecXMuestraUnifor($value);
				break;
			case 52:
				$this->setRumNumInyecXMuEstabiPerd($value);
				break;
			case 53:
				$this->setRumNumInyecXMuProducPerd($value);
				break;
			case 54:
				$this->setRumNumInyecXMuMateriPerd($value);
				break;
			case 55:
				$this->setRumNumInyecXMuPurezaPerd($value);
				break;
			case 56:
				$this->setRumNumInyecXMuDisoluPerd($value);
				break;
			case 57:
				$this->setRumNumInyecXMuUniforPerd($value);
				break;
			case 58:
				$this->setRumFallas($value);
				break;
			case 59:
				$this->setRumObservaciones($value);
				break;
			case 60:
				$this->setRumFecha($value);
				break;
			case 61:
				$this->setRumFechaHoraRegSistema($value);
				break;
			case 62:
				$this->setRumCausaEliminacion($value);
				break;
			case 63:
				$this->setRumFechaHoraElimSistema($value);
				break;
			case 64:
				$this->setRumEliminado($value);
				break;
			case 65:
				$this->setRumTcProductoTerminado($value);
				break;
			case 66:
				$this->setRumTcEstabilidad($value);
				break;
			case 67:
				$this->setRumTcMateriaPrima($value);
				break;
			case 68:
				$this->setRumTcPureza($value);
				break;
			case 69:
				$this->setRumTcDisolucion($value);
				break;
			case 70:
				$this->setRumTcUniformidad($value);
				break;
			case 71:
				$this->setRumTcProductoTerminadoEsta($value);
				break;
			case 72:
				$this->setRumTcEstabilidadEstandar($value);
				break;
			case 73:
				$this->setRumTcMateriaPrimaEstandar($value);
				break;
			case 74:
				$this->setRumTcPurezaEstandar($value);
				break;
			case 75:
				$this->setRumTcDisolucionEstandar($value);
				break;
			case 76:
				$this->setRumTcUniformidadEstandar($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RegistroUsoMaquinaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setRumCodigo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRumMaqCodigo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRumMetCodigo($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRumUsuCodigo($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRumUsuCodigoElimino($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setRumHoraInicioTrabajo($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRumHoraFinTrabajo($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setRumTiempoEntreModelo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setRumTiempoCambioModelo($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setRumTiempoCorridaSistema($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setRumTiempoCorridaCurvas($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setRumTiempoCorridaSistemaEst($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setRumTiempoCorridaCurvasEsta($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setRumNumInyeccionEstandarPer($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setRumNumeroInyeccionEstandar($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setRumTiempoPreparacion($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setRumTiempoDuracionCiclo($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setRumNumeroCorridas($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setRumNumeroInyeccionEstandar1($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setRumNumeroInyeccionEstandar2($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setRumNumeroInyeccionEstandar3($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setRumNumeroInyeccionEstandar4($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setRumNumeroInyeccionEstandar5($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setRumNumeroInyeccionEstandar6($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setRumNumeroInyeccionEstandar7($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setRumNumeroInyeccionEstandar8($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setRumNumInyeccionEstandar1Pe($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setRumNumInyeccionEstandar2Pe($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setRumNumInyeccionEstandar3Pe($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setRumNumInyeccionEstandar4Pe($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setRumNumInyeccionEstandar5Pe($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setRumNumInyeccionEstandar6Pe($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setRumNumInyeccionEstandar7Pe($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setRumNumInyeccionEstandar8Pe($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setRumNumMuestrasProducto($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setRumNumMuestrasEstabilidad($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setRumNumMuestrasMateriaPrima($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setRumNumMuestrasPureza($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setRumNumMuestrasDisolucion($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setRumNumMuestrasUniformidad($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setRumNumMuProductoPerdida($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setRumNumMuEstabilidadPerdida($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setRumNumMuMateriaPrimaPerdi($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setRumNumMuestrasPurezaPerdid($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setRumNumMuestrasDisolucionPe($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setRumNumMuestrasUniformidadP($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setRumNumInyecXMuestraEstabi($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setRumNumInyecXMuestraProduc($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setRumNumInyecXMuestraMateri($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setRumNumInyecXMuestraPureza($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setRumNumInyecXMuestraDisolu($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setRumNumInyecXMuestraUnifor($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setRumNumInyecXMuEstabiPerd($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setRumNumInyecXMuProducPerd($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setRumNumInyecXMuMateriPerd($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setRumNumInyecXMuPurezaPerd($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setRumNumInyecXMuDisoluPerd($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setRumNumInyecXMuUniforPerd($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setRumFallas($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setRumObservaciones($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setRumFecha($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setRumFechaHoraRegSistema($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setRumCausaEliminacion($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setRumFechaHoraElimSistema($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setRumEliminado($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setRumTcProductoTerminado($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setRumTcEstabilidad($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setRumTcMateriaPrima($arr[$keys[67]]);
		if (array_key_exists($keys[68], $arr)) $this->setRumTcPureza($arr[$keys[68]]);
		if (array_key_exists($keys[69], $arr)) $this->setRumTcDisolucion($arr[$keys[69]]);
		if (array_key_exists($keys[70], $arr)) $this->setRumTcUniformidad($arr[$keys[70]]);
		if (array_key_exists($keys[71], $arr)) $this->setRumTcProductoTerminadoEsta($arr[$keys[71]]);
		if (array_key_exists($keys[72], $arr)) $this->setRumTcEstabilidadEstandar($arr[$keys[72]]);
		if (array_key_exists($keys[73], $arr)) $this->setRumTcMateriaPrimaEstandar($arr[$keys[73]]);
		if (array_key_exists($keys[74], $arr)) $this->setRumTcPurezaEstandar($arr[$keys[74]]);
		if (array_key_exists($keys[75], $arr)) $this->setRumTcDisolucionEstandar($arr[$keys[75]]);
		if (array_key_exists($keys[76], $arr)) $this->setRumTcUniformidadEstandar($arr[$keys[76]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RegistroUsoMaquinaPeer::DATABASE_NAME);

		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_CODIGO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_CODIGO, $this->rum_codigo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO, $this->rum_maq_codigo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_MET_CODIGO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_MET_CODIGO, $this->rum_met_codigo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_USU_CODIGO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->rum_usu_codigo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->rum_usu_codigo_elimino);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_HORA_INICIO_TRABAJO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_HORA_INICIO_TRABAJO, $this->rum_hora_inicio_trabajo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_HORA_FIN_TRABAJO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_HORA_FIN_TRABAJO, $this->rum_hora_fin_trabajo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO, $this->rum_tiempo_entre_modelo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_CAMBIO_MODELO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_CAMBIO_MODELO, $this->rum_tiempo_cambio_modelo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_SISTEMA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_SISTEMA, $this->rum_tiempo_corrida_sistema);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_CURVAS)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_CURVAS, $this->rum_tiempo_corrida_curvas);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_SISTEMA_EST)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_SISTEMA_EST, $this->rum_tiempo_corrida_sistema_est);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_CURVAS_ESTA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_CORRIDA_CURVAS_ESTA, $this->rum_tiempo_corrida_curvas_esta);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR_PER)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR_PER, $this->rum_num_inyeccion_estandar_per);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR, $this->rum_numero_inyeccion_estandar);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_PREPARACION)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_PREPARACION, $this->rum_tiempo_preparacion);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TIEMPO_DURACION_CICLO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TIEMPO_DURACION_CICLO, $this->rum_tiempo_duracion_ciclo);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_CORRIDAS)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_CORRIDAS, $this->rum_numero_corridas);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR1)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR1, $this->rum_numero_inyeccion_estandar1);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR2)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR2, $this->rum_numero_inyeccion_estandar2);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR3)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR3, $this->rum_numero_inyeccion_estandar3);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR4)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR4, $this->rum_numero_inyeccion_estandar4);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR5)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR5, $this->rum_numero_inyeccion_estandar5);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR6)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR6, $this->rum_numero_inyeccion_estandar6);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR7)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR7, $this->rum_numero_inyeccion_estandar7);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR8)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUMERO_INYECCION_ESTANDAR8, $this->rum_numero_inyeccion_estandar8);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR1_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR1_PE, $this->rum_num_inyeccion_estandar1_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR2_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR2_PE, $this->rum_num_inyeccion_estandar2_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR3_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR3_PE, $this->rum_num_inyeccion_estandar3_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR4_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR4_PE, $this->rum_num_inyeccion_estandar4_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR5_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR5_PE, $this->rum_num_inyeccion_estandar5_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR6_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR6_PE, $this->rum_num_inyeccion_estandar6_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR7_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR7_PE, $this->rum_num_inyeccion_estandar7_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR8_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYECCION_ESTANDAR8_PE, $this->rum_num_inyeccion_estandar8_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PRODUCTO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PRODUCTO, $this->rum_num_muestras_producto);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_ESTABILIDAD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_ESTABILIDAD, $this->rum_num_muestras_estabilidad);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_MATERIA_PRIMA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_MATERIA_PRIMA, $this->rum_num_muestras_materia_prima);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PUREZA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PUREZA, $this->rum_num_muestras_pureza);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_DISOLUCION)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_DISOLUCION, $this->rum_num_muestras_disolucion);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_UNIFORMIDAD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_UNIFORMIDAD, $this->rum_num_muestras_uniformidad);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MU_PRODUCTO_PERDIDA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MU_PRODUCTO_PERDIDA, $this->rum_num_mu_producto_perdida);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MU_ESTABILIDAD_PERDIDA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MU_ESTABILIDAD_PERDIDA, $this->rum_num_mu_estabilidad_perdida);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MU_MATERIA_PRIMA_PERDI)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MU_MATERIA_PRIMA_PERDI, $this->rum_num_mu_materia_prima_perdi);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PUREZA_PERDID)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_PUREZA_PERDID, $this->rum_num_muestras_pureza_perdid);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_DISOLUCION_PE)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_DISOLUCION_PE, $this->rum_num_muestras_disolucion_pe);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_UNIFORMIDAD_P)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_MUESTRAS_UNIFORMIDAD_P, $this->rum_num_muestras_uniformidad_p);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_ESTABI)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_ESTABI, $this->rum_num_inyec_x_muestra_estabi);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_PRODUC)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_PRODUC, $this->rum_num_inyec_x_muestra_produc);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_MATERI)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_MATERI, $this->rum_num_inyec_x_muestra_materi);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_PUREZA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_PUREZA, $this->rum_num_inyec_x_muestra_pureza);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_DISOLU)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_DISOLU, $this->rum_num_inyec_x_muestra_disolu);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_UNIFOR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MUESTRA_UNIFOR, $this->rum_num_inyec_x_muestra_unifor);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_ESTABI_PERD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_ESTABI_PERD, $this->rum_num_inyec_x_mu_estabi_perd);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_PRODUC_PERD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_PRODUC_PERD, $this->rum_num_inyec_x_mu_produc_perd);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_MATERI_PERD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_MATERI_PERD, $this->rum_num_inyec_x_mu_materi_perd);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_PUREZA_PERD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_PUREZA_PERD, $this->rum_num_inyec_x_mu_pureza_perd);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_DISOLU_PERD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_DISOLU_PERD, $this->rum_num_inyec_x_mu_disolu_perd);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_UNIFOR_PERD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_NUM_INYEC_X_MU_UNIFOR_PERD, $this->rum_num_inyec_x_mu_unifor_perd);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_FALLAS)) $criteria->add(RegistroUsoMaquinaPeer::RUM_FALLAS, $this->rum_fallas);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_OBSERVACIONES)) $criteria->add(RegistroUsoMaquinaPeer::RUM_OBSERVACIONES, $this->rum_observaciones);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_FECHA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_FECHA, $this->rum_fecha);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_FECHA_HORA_REG_SISTEMA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_FECHA_HORA_REG_SISTEMA, $this->rum_fecha_hora_reg_sistema);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_CAUSA_ELIMINACION)) $criteria->add(RegistroUsoMaquinaPeer::RUM_CAUSA_ELIMINACION, $this->rum_causa_eliminacion);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_FECHA_HORA_ELIM_SISTEMA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_FECHA_HORA_ELIM_SISTEMA, $this->rum_fecha_hora_elim_sistema);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_ELIMINADO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_ELIMINADO, $this->rum_eliminado);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_PRODUCTO_TERMINADO)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_PRODUCTO_TERMINADO, $this->rum_tc_producto_terminado);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_ESTABILIDAD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_ESTABILIDAD, $this->rum_tc_estabilidad);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_MATERIA_PRIMA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_MATERIA_PRIMA, $this->rum_tc_materia_prima);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_PUREZA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_PUREZA, $this->rum_tc_pureza);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_DISOLUCION)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_DISOLUCION, $this->rum_tc_disolucion);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_UNIFORMIDAD)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_UNIFORMIDAD, $this->rum_tc_uniformidad);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_PRODUCTO_TERMINADO_ESTA)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_PRODUCTO_TERMINADO_ESTA, $this->rum_tc_producto_terminado_esta);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_ESTABILIDAD_ESTANDAR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_ESTABILIDAD_ESTANDAR, $this->rum_tc_estabilidad_estandar);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_MATERIA_PRIMA_ESTANDAR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_MATERIA_PRIMA_ESTANDAR, $this->rum_tc_materia_prima_estandar);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_PUREZA_ESTANDAR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_PUREZA_ESTANDAR, $this->rum_tc_pureza_estandar);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_DISOLUCION_ESTANDAR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_DISOLUCION_ESTANDAR, $this->rum_tc_disolucion_estandar);
		if ($this->isColumnModified(RegistroUsoMaquinaPeer::RUM_TC_UNIFORMIDAD_ESTANDAR)) $criteria->add(RegistroUsoMaquinaPeer::RUM_TC_UNIFORMIDAD_ESTANDAR, $this->rum_tc_uniformidad_estandar);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RegistroUsoMaquinaPeer::DATABASE_NAME);

		$criteria->add(RegistroUsoMaquinaPeer::RUM_CODIGO, $this->rum_codigo);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getRumCodigo();
	}

	/**
	 * Generic method to set the primary key (rum_codigo column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setRumCodigo($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RegistroUsoMaquina (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setRumMaqCodigo($this->rum_maq_codigo);

		$copyObj->setRumMetCodigo($this->rum_met_codigo);

		$copyObj->setRumUsuCodigo($this->rum_usu_codigo);

		$copyObj->setRumUsuCodigoElimino($this->rum_usu_codigo_elimino);

		$copyObj->setRumHoraInicioTrabajo($this->rum_hora_inicio_trabajo);

		$copyObj->setRumHoraFinTrabajo($this->rum_hora_fin_trabajo);

		$copyObj->setRumTiempoEntreModelo($this->rum_tiempo_entre_modelo);

		$copyObj->setRumTiempoCambioModelo($this->rum_tiempo_cambio_modelo);

		$copyObj->setRumTiempoCorridaSistema($this->rum_tiempo_corrida_sistema);

		$copyObj->setRumTiempoCorridaCurvas($this->rum_tiempo_corrida_curvas);

		$copyObj->setRumTiempoCorridaSistemaEst($this->rum_tiempo_corrida_sistema_est);

		$copyObj->setRumTiempoCorridaCurvasEsta($this->rum_tiempo_corrida_curvas_esta);

		$copyObj->setRumNumInyeccionEstandarPer($this->rum_num_inyeccion_estandar_per);

		$copyObj->setRumNumeroInyeccionEstandar($this->rum_numero_inyeccion_estandar);

		$copyObj->setRumTiempoPreparacion($this->rum_tiempo_preparacion);

		$copyObj->setRumTiempoDuracionCiclo($this->rum_tiempo_duracion_ciclo);

		$copyObj->setRumNumeroCorridas($this->rum_numero_corridas);

		$copyObj->setRumNumeroInyeccionEstandar1($this->rum_numero_inyeccion_estandar1);

		$copyObj->setRumNumeroInyeccionEstandar2($this->rum_numero_inyeccion_estandar2);

		$copyObj->setRumNumeroInyeccionEstandar3($this->rum_numero_inyeccion_estandar3);

		$copyObj->setRumNumeroInyeccionEstandar4($this->rum_numero_inyeccion_estandar4);

		$copyObj->setRumNumeroInyeccionEstandar5($this->rum_numero_inyeccion_estandar5);

		$copyObj->setRumNumeroInyeccionEstandar6($this->rum_numero_inyeccion_estandar6);

		$copyObj->setRumNumeroInyeccionEstandar7($this->rum_numero_inyeccion_estandar7);

		$copyObj->setRumNumeroInyeccionEstandar8($this->rum_numero_inyeccion_estandar8);

		$copyObj->setRumNumInyeccionEstandar1Pe($this->rum_num_inyeccion_estandar1_pe);

		$copyObj->setRumNumInyeccionEstandar2Pe($this->rum_num_inyeccion_estandar2_pe);

		$copyObj->setRumNumInyeccionEstandar3Pe($this->rum_num_inyeccion_estandar3_pe);

		$copyObj->setRumNumInyeccionEstandar4Pe($this->rum_num_inyeccion_estandar4_pe);

		$copyObj->setRumNumInyeccionEstandar5Pe($this->rum_num_inyeccion_estandar5_pe);

		$copyObj->setRumNumInyeccionEstandar6Pe($this->rum_num_inyeccion_estandar6_pe);

		$copyObj->setRumNumInyeccionEstandar7Pe($this->rum_num_inyeccion_estandar7_pe);

		$copyObj->setRumNumInyeccionEstandar8Pe($this->rum_num_inyeccion_estandar8_pe);

		$copyObj->setRumNumMuestrasProducto($this->rum_num_muestras_producto);

		$copyObj->setRumNumMuestrasEstabilidad($this->rum_num_muestras_estabilidad);

		$copyObj->setRumNumMuestrasMateriaPrima($this->rum_num_muestras_materia_prima);

		$copyObj->setRumNumMuestrasPureza($this->rum_num_muestras_pureza);

		$copyObj->setRumNumMuestrasDisolucion($this->rum_num_muestras_disolucion);

		$copyObj->setRumNumMuestrasUniformidad($this->rum_num_muestras_uniformidad);

		$copyObj->setRumNumMuProductoPerdida($this->rum_num_mu_producto_perdida);

		$copyObj->setRumNumMuEstabilidadPerdida($this->rum_num_mu_estabilidad_perdida);

		$copyObj->setRumNumMuMateriaPrimaPerdi($this->rum_num_mu_materia_prima_perdi);

		$copyObj->setRumNumMuestrasPurezaPerdid($this->rum_num_muestras_pureza_perdid);

		$copyObj->setRumNumMuestrasDisolucionPe($this->rum_num_muestras_disolucion_pe);

		$copyObj->setRumNumMuestrasUniformidadP($this->rum_num_muestras_uniformidad_p);

		$copyObj->setRumNumInyecXMuestraEstabi($this->rum_num_inyec_x_muestra_estabi);

		$copyObj->setRumNumInyecXMuestraProduc($this->rum_num_inyec_x_muestra_produc);

		$copyObj->setRumNumInyecXMuestraMateri($this->rum_num_inyec_x_muestra_materi);

		$copyObj->setRumNumInyecXMuestraPureza($this->rum_num_inyec_x_muestra_pureza);

		$copyObj->setRumNumInyecXMuestraDisolu($this->rum_num_inyec_x_muestra_disolu);

		$copyObj->setRumNumInyecXMuestraUnifor($this->rum_num_inyec_x_muestra_unifor);

		$copyObj->setRumNumInyecXMuEstabiPerd($this->rum_num_inyec_x_mu_estabi_perd);

		$copyObj->setRumNumInyecXMuProducPerd($this->rum_num_inyec_x_mu_produc_perd);

		$copyObj->setRumNumInyecXMuMateriPerd($this->rum_num_inyec_x_mu_materi_perd);

		$copyObj->setRumNumInyecXMuPurezaPerd($this->rum_num_inyec_x_mu_pureza_perd);

		$copyObj->setRumNumInyecXMuDisoluPerd($this->rum_num_inyec_x_mu_disolu_perd);

		$copyObj->setRumNumInyecXMuUniforPerd($this->rum_num_inyec_x_mu_unifor_perd);

		$copyObj->setRumFallas($this->rum_fallas);

		$copyObj->setRumObservaciones($this->rum_observaciones);

		$copyObj->setRumFecha($this->rum_fecha);

		$copyObj->setRumFechaHoraRegSistema($this->rum_fecha_hora_reg_sistema);

		$copyObj->setRumCausaEliminacion($this->rum_causa_eliminacion);

		$copyObj->setRumFechaHoraElimSistema($this->rum_fecha_hora_elim_sistema);

		$copyObj->setRumEliminado($this->rum_eliminado);

		$copyObj->setRumTcProductoTerminado($this->rum_tc_producto_terminado);

		$copyObj->setRumTcEstabilidad($this->rum_tc_estabilidad);

		$copyObj->setRumTcMateriaPrima($this->rum_tc_materia_prima);

		$copyObj->setRumTcPureza($this->rum_tc_pureza);

		$copyObj->setRumTcDisolucion($this->rum_tc_disolucion);

		$copyObj->setRumTcUniformidad($this->rum_tc_uniformidad);

		$copyObj->setRumTcProductoTerminadoEsta($this->rum_tc_producto_terminado_esta);

		$copyObj->setRumTcEstabilidadEstandar($this->rum_tc_estabilidad_estandar);

		$copyObj->setRumTcMateriaPrimaEstandar($this->rum_tc_materia_prima_estandar);

		$copyObj->setRumTcPurezaEstandar($this->rum_tc_pureza_estandar);

		$copyObj->setRumTcDisolucionEstandar($this->rum_tc_disolucion_estandar);

		$copyObj->setRumTcUniformidadEstandar($this->rum_tc_uniformidad_estandar);


		$copyObj->setNew(true);

		$copyObj->setRumCodigo(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RegistroUsoMaquina Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RegistroUsoMaquinaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RegistroUsoMaquinaPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseRegistroUsoMaquina:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseRegistroUsoMaquina::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseRegistroUsoMaquina
