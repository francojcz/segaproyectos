<?php

/**
 * Base class that represents a row from the 'metodo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 01/24/14 05:38:18
 *
 * @package    lib.model.om
 */
abstract class BaseMetodo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MetodoPeer
	 */
	protected static $peer;

	/**
	 * The value for the met_codigo field.
	 * @var        int
	 */
	protected $met_codigo;

	/**
	 * The value for the met_nombre field.
	 * @var        string
	 */
	protected $met_nombre;

	/**
	 * The value for the met_tiempo_alistamiento field.
	 * @var        string
	 */
	protected $met_tiempo_alistamiento;

	/**
	 * The value for the met_tiempo_acondicionamiento field.
	 * @var        string
	 */
	protected $met_tiempo_acondicionamiento;

	/**
	 * The value for the met_tiempo_estabilizacion field.
	 * @var        string
	 */
	protected $met_tiempo_estabilizacion;

	/**
	 * The value for the met_tiempo_estandar field.
	 * @var        string
	 */
	protected $met_tiempo_estandar;

	/**
	 * The value for the met_tiempo_corrida_sistema field.
	 * @var        string
	 */
	protected $met_tiempo_corrida_sistema;

	/**
	 * The value for the met_tiempo_corrida_curvas field.
	 * @var        string
	 */
	protected $met_tiempo_corrida_curvas;

	/**
	 * The value for the met_num_inyeccion_estandar_1 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_1;

	/**
	 * The value for the met_num_inyeccion_estandar_2 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_2;

	/**
	 * The value for the met_num_inyeccion_estandar_3 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_3;

	/**
	 * The value for the met_num_inyeccion_estandar_4 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_4;

	/**
	 * The value for the met_num_inyeccion_estandar_5 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_5;

	/**
	 * The value for the met_num_inyeccion_estandar_6 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_6;

	/**
	 * The value for the met_num_inyeccion_estandar_7 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_7;

	/**
	 * The value for the met_num_inyeccion_estandar_8 field.
	 * @var        int
	 */
	protected $met_num_inyeccion_estandar_8;

	/**
	 * The value for the met_fecha_registro_sistema field.
	 * @var        string
	 */
	protected $met_fecha_registro_sistema;

	/**
	 * The value for the met_num_inyec_x_mu_producto field.
	 * @var        int
	 */
	protected $met_num_inyec_x_mu_producto;

	/**
	 * The value for the met_num_inyec_x_mu_estabilidad field.
	 * @var        int
	 */
	protected $met_num_inyec_x_mu_estabilidad;

	/**
	 * The value for the met_num_inyec_x_mu_materia_pri field.
	 * @var        int
	 */
	protected $met_num_inyec_x_mu_materia_pri;

	/**
	 * The value for the met_num_inyec_x_mu_pureza field.
	 * @var        int
	 */
	protected $met_num_inyec_x_mu_pureza;

	/**
	 * The value for the met_num_inyec_x_mu_disolucion field.
	 * @var        int
	 */
	protected $met_num_inyec_x_mu_disolucion;

	/**
	 * The value for the met_num_inyec_x_mu_uniformidad field.
	 * @var        int
	 */
	protected $met_num_inyec_x_mu_uniformidad;

	/**
	 * The value for the met_numero_inyeccion_estandar field.
	 * @var        int
	 */
	protected $met_numero_inyeccion_estandar;

	/**
	 * The value for the met_usu_crea field.
	 * @var        int
	 */
	protected $met_usu_crea;

	/**
	 * The value for the met_usu_actualiza field.
	 * @var        int
	 */
	protected $met_usu_actualiza;

	/**
	 * The value for the met_fecha_actualizacion field.
	 * @var        string
	 */
	protected $met_fecha_actualizacion;

	/**
	 * The value for the met_eliminado field.
	 * @var        int
	 */
	protected $met_eliminado;

	/**
	 * The value for the met_causa_eliminacion field.
	 * @var        string
	 */
	protected $met_causa_eliminacion;

	/**
	 * The value for the met_causa_actualizacion field.
	 * @var        string
	 */
	protected $met_causa_actualizacion;

	/**
	 * The value for the met_tc_producto_terminado field.
	 * @var        string
	 */
	protected $met_tc_producto_terminado;

	/**
	 * The value for the met_tc_estabilidad field.
	 * @var        string
	 */
	protected $met_tc_estabilidad;

	/**
	 * The value for the met_tc_materia_prima field.
	 * @var        string
	 */
	protected $met_tc_materia_prima;

	/**
	 * The value for the met_tc_pureza field.
	 * @var        string
	 */
	protected $met_tc_pureza;

	/**
	 * The value for the met_tc_disolucion field.
	 * @var        string
	 */
	protected $met_tc_disolucion;

	/**
	 * The value for the met_tc_uniformidad field.
	 * @var        string
	 */
	protected $met_tc_uniformidad;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'MetodoPeer';

	/**
	 * Get the [met_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getMetCodigo()
	{
		return $this->met_codigo;
	}

	/**
	 * Get the [met_nombre] column value.
	 * 
	 * @return     string
	 */
	public function getMetNombre()
	{
		return $this->met_nombre;
	}

	/**
	 * Get the [met_tiempo_alistamiento] column value.
	 * 
	 * @return     string
	 */
	public function getMetTiempoAlistamiento()
	{
		return $this->met_tiempo_alistamiento;
	}

	/**
	 * Get the [met_tiempo_acondicionamiento] column value.
	 * 
	 * @return     string
	 */
	public function getMetTiempoAcondicionamiento()
	{
		return $this->met_tiempo_acondicionamiento;
	}

	/**
	 * Get the [met_tiempo_estabilizacion] column value.
	 * 
	 * @return     string
	 */
	public function getMetTiempoEstabilizacion()
	{
		return $this->met_tiempo_estabilizacion;
	}

	/**
	 * Get the [met_tiempo_estandar] column value.
	 * 
	 * @return     string
	 */
	public function getMetTiempoEstandar()
	{
		return $this->met_tiempo_estandar;
	}

	/**
	 * Get the [met_tiempo_corrida_sistema] column value.
	 * 
	 * @return     string
	 */
	public function getMetTiempoCorridaSistema()
	{
		return $this->met_tiempo_corrida_sistema;
	}

	/**
	 * Get the [met_tiempo_corrida_curvas] column value.
	 * 
	 * @return     string
	 */
	public function getMetTiempoCorridaCurvas()
	{
		return $this->met_tiempo_corrida_curvas;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_1] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar1()
	{
		return $this->met_num_inyeccion_estandar_1;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_2] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar2()
	{
		return $this->met_num_inyeccion_estandar_2;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_3] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar3()
	{
		return $this->met_num_inyeccion_estandar_3;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_4] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar4()
	{
		return $this->met_num_inyeccion_estandar_4;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_5] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar5()
	{
		return $this->met_num_inyeccion_estandar_5;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_6] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar6()
	{
		return $this->met_num_inyeccion_estandar_6;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_7] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar7()
	{
		return $this->met_num_inyeccion_estandar_7;
	}

	/**
	 * Get the [met_num_inyeccion_estandar_8] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyeccionEstandar8()
	{
		return $this->met_num_inyeccion_estandar_8;
	}

	/**
	 * Get the [optionally formatted] temporal [met_fecha_registro_sistema] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMetFechaRegistroSistema($format = 'Y-m-d H:i:s')
	{
		if ($this->met_fecha_registro_sistema === null) {
			return null;
		}


		if ($this->met_fecha_registro_sistema === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->met_fecha_registro_sistema);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->met_fecha_registro_sistema, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [met_num_inyec_x_mu_producto] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyecXMuProducto()
	{
		return $this->met_num_inyec_x_mu_producto;
	}

	/**
	 * Get the [met_num_inyec_x_mu_estabilidad] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyecXMuEstabilidad()
	{
		return $this->met_num_inyec_x_mu_estabilidad;
	}

	/**
	 * Get the [met_num_inyec_x_mu_materia_pri] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyecXMuMateriaPri()
	{
		return $this->met_num_inyec_x_mu_materia_pri;
	}

	/**
	 * Get the [met_num_inyec_x_mu_pureza] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyecXMuPureza()
	{
		return $this->met_num_inyec_x_mu_pureza;
	}

	/**
	 * Get the [met_num_inyec_x_mu_disolucion] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyecXMuDisolucion()
	{
		return $this->met_num_inyec_x_mu_disolucion;
	}

	/**
	 * Get the [met_num_inyec_x_mu_uniformidad] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumInyecXMuUniformidad()
	{
		return $this->met_num_inyec_x_mu_uniformidad;
	}

	/**
	 * Get the [met_numero_inyeccion_estandar] column value.
	 * 
	 * @return     int
	 */
	public function getMetNumeroInyeccionEstandar()
	{
		return $this->met_numero_inyeccion_estandar;
	}

	/**
	 * Get the [met_usu_crea] column value.
	 * 
	 * @return     int
	 */
	public function getMetUsuCrea()
	{
		return $this->met_usu_crea;
	}

	/**
	 * Get the [met_usu_actualiza] column value.
	 * 
	 * @return     int
	 */
	public function getMetUsuActualiza()
	{
		return $this->met_usu_actualiza;
	}

	/**
	 * Get the [optionally formatted] temporal [met_fecha_actualizacion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMetFechaActualizacion($format = 'Y-m-d H:i:s')
	{
		if ($this->met_fecha_actualizacion === null) {
			return null;
		}


		if ($this->met_fecha_actualizacion === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->met_fecha_actualizacion);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->met_fecha_actualizacion, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [met_eliminado] column value.
	 * 
	 * @return     int
	 */
	public function getMetEliminado()
	{
		return $this->met_eliminado;
	}

	/**
	 * Get the [met_causa_eliminacion] column value.
	 * 
	 * @return     string
	 */
	public function getMetCausaEliminacion()
	{
		return $this->met_causa_eliminacion;
	}

	/**
	 * Get the [met_causa_actualizacion] column value.
	 * 
	 * @return     string
	 */
	public function getMetCausaActualizacion()
	{
		return $this->met_causa_actualizacion;
	}

	/**
	 * Get the [met_tc_producto_terminado] column value.
	 * 
	 * @return     string
	 */
	public function getMetTcProductoTerminado()
	{
		return $this->met_tc_producto_terminado;
	}

	/**
	 * Get the [met_tc_estabilidad] column value.
	 * 
	 * @return     string
	 */
	public function getMetTcEstabilidad()
	{
		return $this->met_tc_estabilidad;
	}

	/**
	 * Get the [met_tc_materia_prima] column value.
	 * 
	 * @return     string
	 */
	public function getMetTcMateriaPrima()
	{
		return $this->met_tc_materia_prima;
	}

	/**
	 * Get the [met_tc_pureza] column value.
	 * 
	 * @return     string
	 */
	public function getMetTcPureza()
	{
		return $this->met_tc_pureza;
	}

	/**
	 * Get the [met_tc_disolucion] column value.
	 * 
	 * @return     string
	 */
	public function getMetTcDisolucion()
	{
		return $this->met_tc_disolucion;
	}

	/**
	 * Get the [met_tc_uniformidad] column value.
	 * 
	 * @return     string
	 */
	public function getMetTcUniformidad()
	{
		return $this->met_tc_uniformidad;
	}

	/**
	 * Set the value of [met_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_codigo !== $v) {
			$this->met_codigo = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_CODIGO;
		}

		return $this;
	} // setMetCodigo()

	/**
	 * Set the value of [met_nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_nombre !== $v) {
			$this->met_nombre = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NOMBRE;
		}

		return $this;
	} // setMetNombre()

	/**
	 * Set the value of [met_tiempo_alistamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTiempoAlistamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tiempo_alistamiento !== $v) {
			$this->met_tiempo_alistamiento = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TIEMPO_ALISTAMIENTO;
		}

		return $this;
	} // setMetTiempoAlistamiento()

	/**
	 * Set the value of [met_tiempo_acondicionamiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTiempoAcondicionamiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tiempo_acondicionamiento !== $v) {
			$this->met_tiempo_acondicionamiento = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TIEMPO_ACONDICIONAMIENTO;
		}

		return $this;
	} // setMetTiempoAcondicionamiento()

	/**
	 * Set the value of [met_tiempo_estabilizacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTiempoEstabilizacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tiempo_estabilizacion !== $v) {
			$this->met_tiempo_estabilizacion = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TIEMPO_ESTABILIZACION;
		}

		return $this;
	} // setMetTiempoEstabilizacion()

	/**
	 * Set the value of [met_tiempo_estandar] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTiempoEstandar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tiempo_estandar !== $v) {
			$this->met_tiempo_estandar = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TIEMPO_ESTANDAR;
		}

		return $this;
	} // setMetTiempoEstandar()

	/**
	 * Set the value of [met_tiempo_corrida_sistema] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTiempoCorridaSistema($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tiempo_corrida_sistema !== $v) {
			$this->met_tiempo_corrida_sistema = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TIEMPO_CORRIDA_SISTEMA;
		}

		return $this;
	} // setMetTiempoCorridaSistema()

	/**
	 * Set the value of [met_tiempo_corrida_curvas] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTiempoCorridaCurvas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tiempo_corrida_curvas !== $v) {
			$this->met_tiempo_corrida_curvas = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TIEMPO_CORRIDA_CURVAS;
		}

		return $this;
	} // setMetTiempoCorridaCurvas()

	/**
	 * Set the value of [met_num_inyeccion_estandar_1] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar1($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_1 !== $v) {
			$this->met_num_inyeccion_estandar_1 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_1;
		}

		return $this;
	} // setMetNumInyeccionEstandar1()

	/**
	 * Set the value of [met_num_inyeccion_estandar_2] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_2 !== $v) {
			$this->met_num_inyeccion_estandar_2 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_2;
		}

		return $this;
	} // setMetNumInyeccionEstandar2()

	/**
	 * Set the value of [met_num_inyeccion_estandar_3] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar3($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_3 !== $v) {
			$this->met_num_inyeccion_estandar_3 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_3;
		}

		return $this;
	} // setMetNumInyeccionEstandar3()

	/**
	 * Set the value of [met_num_inyeccion_estandar_4] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar4($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_4 !== $v) {
			$this->met_num_inyeccion_estandar_4 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_4;
		}

		return $this;
	} // setMetNumInyeccionEstandar4()

	/**
	 * Set the value of [met_num_inyeccion_estandar_5] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar5($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_5 !== $v) {
			$this->met_num_inyeccion_estandar_5 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_5;
		}

		return $this;
	} // setMetNumInyeccionEstandar5()

	/**
	 * Set the value of [met_num_inyeccion_estandar_6] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar6($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_6 !== $v) {
			$this->met_num_inyeccion_estandar_6 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_6;
		}

		return $this;
	} // setMetNumInyeccionEstandar6()

	/**
	 * Set the value of [met_num_inyeccion_estandar_7] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar7($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_7 !== $v) {
			$this->met_num_inyeccion_estandar_7 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_7;
		}

		return $this;
	} // setMetNumInyeccionEstandar7()

	/**
	 * Set the value of [met_num_inyeccion_estandar_8] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyeccionEstandar8($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyeccion_estandar_8 !== $v) {
			$this->met_num_inyeccion_estandar_8 = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYECCION_ESTANDAR_8;
		}

		return $this;
	} // setMetNumInyeccionEstandar8()

	/**
	 * Sets the value of [met_fecha_registro_sistema] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetFechaRegistroSistema($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->met_fecha_registro_sistema !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->met_fecha_registro_sistema !== null && $tmpDt = new DateTime($this->met_fecha_registro_sistema)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->met_fecha_registro_sistema = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MetodoPeer::MET_FECHA_REGISTRO_SISTEMA;
			}
		} // if either are not null

		return $this;
	} // setMetFechaRegistroSistema()

	/**
	 * Set the value of [met_num_inyec_x_mu_producto] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyecXMuProducto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyec_x_mu_producto !== $v) {
			$this->met_num_inyec_x_mu_producto = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYEC_X_MU_PRODUCTO;
		}

		return $this;
	} // setMetNumInyecXMuProducto()

	/**
	 * Set the value of [met_num_inyec_x_mu_estabilidad] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyecXMuEstabilidad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyec_x_mu_estabilidad !== $v) {
			$this->met_num_inyec_x_mu_estabilidad = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYEC_X_MU_ESTABILIDAD;
		}

		return $this;
	} // setMetNumInyecXMuEstabilidad()

	/**
	 * Set the value of [met_num_inyec_x_mu_materia_pri] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyecXMuMateriaPri($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyec_x_mu_materia_pri !== $v) {
			$this->met_num_inyec_x_mu_materia_pri = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYEC_X_MU_MATERIA_PRI;
		}

		return $this;
	} // setMetNumInyecXMuMateriaPri()

	/**
	 * Set the value of [met_num_inyec_x_mu_pureza] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyecXMuPureza($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyec_x_mu_pureza !== $v) {
			$this->met_num_inyec_x_mu_pureza = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYEC_X_MU_PUREZA;
		}

		return $this;
	} // setMetNumInyecXMuPureza()

	/**
	 * Set the value of [met_num_inyec_x_mu_disolucion] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyecXMuDisolucion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyec_x_mu_disolucion !== $v) {
			$this->met_num_inyec_x_mu_disolucion = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYEC_X_MU_DISOLUCION;
		}

		return $this;
	} // setMetNumInyecXMuDisolucion()

	/**
	 * Set the value of [met_num_inyec_x_mu_uniformidad] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumInyecXMuUniformidad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_num_inyec_x_mu_uniformidad !== $v) {
			$this->met_num_inyec_x_mu_uniformidad = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUM_INYEC_X_MU_UNIFORMIDAD;
		}

		return $this;
	} // setMetNumInyecXMuUniformidad()

	/**
	 * Set the value of [met_numero_inyeccion_estandar] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetNumeroInyeccionEstandar($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_numero_inyeccion_estandar !== $v) {
			$this->met_numero_inyeccion_estandar = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_NUMERO_INYECCION_ESTANDAR;
		}

		return $this;
	} // setMetNumeroInyeccionEstandar()

	/**
	 * Set the value of [met_usu_crea] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetUsuCrea($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_usu_crea !== $v) {
			$this->met_usu_crea = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_USU_CREA;
		}

		return $this;
	} // setMetUsuCrea()

	/**
	 * Set the value of [met_usu_actualiza] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetUsuActualiza($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_usu_actualiza !== $v) {
			$this->met_usu_actualiza = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_USU_ACTUALIZA;
		}

		return $this;
	} // setMetUsuActualiza()

	/**
	 * Sets the value of [met_fecha_actualizacion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetFechaActualizacion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->met_fecha_actualizacion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->met_fecha_actualizacion !== null && $tmpDt = new DateTime($this->met_fecha_actualizacion)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->met_fecha_actualizacion = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MetodoPeer::MET_FECHA_ACTUALIZACION;
			}
		} // if either are not null

		return $this;
	} // setMetFechaActualizacion()

	/**
	 * Set the value of [met_eliminado] column.
	 * 
	 * @param      int $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetEliminado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->met_eliminado !== $v) {
			$this->met_eliminado = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_ELIMINADO;
		}

		return $this;
	} // setMetEliminado()

	/**
	 * Set the value of [met_causa_eliminacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetCausaEliminacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_causa_eliminacion !== $v) {
			$this->met_causa_eliminacion = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_CAUSA_ELIMINACION;
		}

		return $this;
	} // setMetCausaEliminacion()

	/**
	 * Set the value of [met_causa_actualizacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetCausaActualizacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_causa_actualizacion !== $v) {
			$this->met_causa_actualizacion = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_CAUSA_ACTUALIZACION;
		}

		return $this;
	} // setMetCausaActualizacion()

	/**
	 * Set the value of [met_tc_producto_terminado] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTcProductoTerminado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tc_producto_terminado !== $v) {
			$this->met_tc_producto_terminado = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TC_PRODUCTO_TERMINADO;
		}

		return $this;
	} // setMetTcProductoTerminado()

	/**
	 * Set the value of [met_tc_estabilidad] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTcEstabilidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tc_estabilidad !== $v) {
			$this->met_tc_estabilidad = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TC_ESTABILIDAD;
		}

		return $this;
	} // setMetTcEstabilidad()

	/**
	 * Set the value of [met_tc_materia_prima] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTcMateriaPrima($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tc_materia_prima !== $v) {
			$this->met_tc_materia_prima = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TC_MATERIA_PRIMA;
		}

		return $this;
	} // setMetTcMateriaPrima()

	/**
	 * Set the value of [met_tc_pureza] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTcPureza($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tc_pureza !== $v) {
			$this->met_tc_pureza = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TC_PUREZA;
		}

		return $this;
	} // setMetTcPureza()

	/**
	 * Set the value of [met_tc_disolucion] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTcDisolucion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tc_disolucion !== $v) {
			$this->met_tc_disolucion = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TC_DISOLUCION;
		}

		return $this;
	} // setMetTcDisolucion()

	/**
	 * Set the value of [met_tc_uniformidad] column.
	 * 
	 * @param      string $v new value
	 * @return     Metodo The current object (for fluent API support)
	 */
	public function setMetTcUniformidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->met_tc_uniformidad !== $v) {
			$this->met_tc_uniformidad = $v;
			$this->modifiedColumns[] = MetodoPeer::MET_TC_UNIFORMIDAD;
		}

		return $this;
	} // setMetTcUniformidad()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->met_codigo = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->met_nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->met_tiempo_alistamiento = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->met_tiempo_acondicionamiento = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->met_tiempo_estabilizacion = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->met_tiempo_estandar = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->met_tiempo_corrida_sistema = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->met_tiempo_corrida_curvas = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->met_num_inyeccion_estandar_1 = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->met_num_inyeccion_estandar_2 = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->met_num_inyeccion_estandar_3 = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->met_num_inyeccion_estandar_4 = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->met_num_inyeccion_estandar_5 = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->met_num_inyeccion_estandar_6 = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->met_num_inyeccion_estandar_7 = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->met_num_inyeccion_estandar_8 = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->met_fecha_registro_sistema = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->met_num_inyec_x_mu_producto = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->met_num_inyec_x_mu_estabilidad = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->met_num_inyec_x_mu_materia_pri = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->met_num_inyec_x_mu_pureza = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->met_num_inyec_x_mu_disolucion = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->met_num_inyec_x_mu_uniformidad = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->met_numero_inyeccion_estandar = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->met_usu_crea = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->met_usu_actualiza = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->met_fecha_actualizacion = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->met_eliminado = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->met_causa_eliminacion = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->met_causa_actualizacion = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->met_tc_producto_terminado = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->met_tc_estabilidad = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->met_tc_materia_prima = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->met_tc_pureza = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->met_tc_disolucion = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->met_tc_uniformidad = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 36; // 36 = MetodoPeer::NUM_COLUMNS - MetodoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Metodo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MetodoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MetodoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MetodoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMetodo:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				MetodoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMetodo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MetodoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMetodo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMetodo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				MetodoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MetodoPeer::MET_CODIGO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MetodoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setMetCodigo($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MetodoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = MetodoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MetodoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getMetCodigo();
				break;
			case 1:
				return $this->getMetNombre();
				break;
			case 2:
				return $this->getMetTiempoAlistamiento();
				break;
			case 3:
				return $this->getMetTiempoAcondicionamiento();
				break;
			case 4:
				return $this->getMetTiempoEstabilizacion();
				break;
			case 5:
				return $this->getMetTiempoEstandar();
				break;
			case 6:
				return $this->getMetTiempoCorridaSistema();
				break;
			case 7:
				return $this->getMetTiempoCorridaCurvas();
				break;
			case 8:
				return $this->getMetNumInyeccionEstandar1();
				break;
			case 9:
				return $this->getMetNumInyeccionEstandar2();
				break;
			case 10:
				return $this->getMetNumInyeccionEstandar3();
				break;
			case 11:
				return $this->getMetNumInyeccionEstandar4();
				break;
			case 12:
				return $this->getMetNumInyeccionEstandar5();
				break;
			case 13:
				return $this->getMetNumInyeccionEstandar6();
				break;
			case 14:
				return $this->getMetNumInyeccionEstandar7();
				break;
			case 15:
				return $this->getMetNumInyeccionEstandar8();
				break;
			case 16:
				return $this->getMetFechaRegistroSistema();
				break;
			case 17:
				return $this->getMetNumInyecXMuProducto();
				break;
			case 18:
				return $this->getMetNumInyecXMuEstabilidad();
				break;
			case 19:
				return $this->getMetNumInyecXMuMateriaPri();
				break;
			case 20:
				return $this->getMetNumInyecXMuPureza();
				break;
			case 21:
				return $this->getMetNumInyecXMuDisolucion();
				break;
			case 22:
				return $this->getMetNumInyecXMuUniformidad();
				break;
			case 23:
				return $this->getMetNumeroInyeccionEstandar();
				break;
			case 24:
				return $this->getMetUsuCrea();
				break;
			case 25:
				return $this->getMetUsuActualiza();
				break;
			case 26:
				return $this->getMetFechaActualizacion();
				break;
			case 27:
				return $this->getMetEliminado();
				break;
			case 28:
				return $this->getMetCausaEliminacion();
				break;
			case 29:
				return $this->getMetCausaActualizacion();
				break;
			case 30:
				return $this->getMetTcProductoTerminado();
				break;
			case 31:
				return $this->getMetTcEstabilidad();
				break;
			case 32:
				return $this->getMetTcMateriaPrima();
				break;
			case 33:
				return $this->getMetTcPureza();
				break;
			case 34:
				return $this->getMetTcDisolucion();
				break;
			case 35:
				return $this->getMetTcUniformidad();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MetodoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getMetCodigo(),
			$keys[1] => $this->getMetNombre(),
			$keys[2] => $this->getMetTiempoAlistamiento(),
			$keys[3] => $this->getMetTiempoAcondicionamiento(),
			$keys[4] => $this->getMetTiempoEstabilizacion(),
			$keys[5] => $this->getMetTiempoEstandar(),
			$keys[6] => $this->getMetTiempoCorridaSistema(),
			$keys[7] => $this->getMetTiempoCorridaCurvas(),
			$keys[8] => $this->getMetNumInyeccionEstandar1(),
			$keys[9] => $this->getMetNumInyeccionEstandar2(),
			$keys[10] => $this->getMetNumInyeccionEstandar3(),
			$keys[11] => $this->getMetNumInyeccionEstandar4(),
			$keys[12] => $this->getMetNumInyeccionEstandar5(),
			$keys[13] => $this->getMetNumInyeccionEstandar6(),
			$keys[14] => $this->getMetNumInyeccionEstandar7(),
			$keys[15] => $this->getMetNumInyeccionEstandar8(),
			$keys[16] => $this->getMetFechaRegistroSistema(),
			$keys[17] => $this->getMetNumInyecXMuProducto(),
			$keys[18] => $this->getMetNumInyecXMuEstabilidad(),
			$keys[19] => $this->getMetNumInyecXMuMateriaPri(),
			$keys[20] => $this->getMetNumInyecXMuPureza(),
			$keys[21] => $this->getMetNumInyecXMuDisolucion(),
			$keys[22] => $this->getMetNumInyecXMuUniformidad(),
			$keys[23] => $this->getMetNumeroInyeccionEstandar(),
			$keys[24] => $this->getMetUsuCrea(),
			$keys[25] => $this->getMetUsuActualiza(),
			$keys[26] => $this->getMetFechaActualizacion(),
			$keys[27] => $this->getMetEliminado(),
			$keys[28] => $this->getMetCausaEliminacion(),
			$keys[29] => $this->getMetCausaActualizacion(),
			$keys[30] => $this->getMetTcProductoTerminado(),
			$keys[31] => $this->getMetTcEstabilidad(),
			$keys[32] => $this->getMetTcMateriaPrima(),
			$keys[33] => $this->getMetTcPureza(),
			$keys[34] => $this->getMetTcDisolucion(),
			$keys[35] => $this->getMetTcUniformidad(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MetodoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setMetCodigo($value);
				break;
			case 1:
				$this->setMetNombre($value);
				break;
			case 2:
				$this->setMetTiempoAlistamiento($value);
				break;
			case 3:
				$this->setMetTiempoAcondicionamiento($value);
				break;
			case 4:
				$this->setMetTiempoEstabilizacion($value);
				break;
			case 5:
				$this->setMetTiempoEstandar($value);
				break;
			case 6:
				$this->setMetTiempoCorridaSistema($value);
				break;
			case 7:
				$this->setMetTiempoCorridaCurvas($value);
				break;
			case 8:
				$this->setMetNumInyeccionEstandar1($value);
				break;
			case 9:
				$this->setMetNumInyeccionEstandar2($value);
				break;
			case 10:
				$this->setMetNumInyeccionEstandar3($value);
				break;
			case 11:
				$this->setMetNumInyeccionEstandar4($value);
				break;
			case 12:
				$this->setMetNumInyeccionEstandar5($value);
				break;
			case 13:
				$this->setMetNumInyeccionEstandar6($value);
				break;
			case 14:
				$this->setMetNumInyeccionEstandar7($value);
				break;
			case 15:
				$this->setMetNumInyeccionEstandar8($value);
				break;
			case 16:
				$this->setMetFechaRegistroSistema($value);
				break;
			case 17:
				$this->setMetNumInyecXMuProducto($value);
				break;
			case 18:
				$this->setMetNumInyecXMuEstabilidad($value);
				break;
			case 19:
				$this->setMetNumInyecXMuMateriaPri($value);
				break;
			case 20:
				$this->setMetNumInyecXMuPureza($value);
				break;
			case 21:
				$this->setMetNumInyecXMuDisolucion($value);
				break;
			case 22:
				$this->setMetNumInyecXMuUniformidad($value);
				break;
			case 23:
				$this->setMetNumeroInyeccionEstandar($value);
				break;
			case 24:
				$this->setMetUsuCrea($value);
				break;
			case 25:
				$this->setMetUsuActualiza($value);
				break;
			case 26:
				$this->setMetFechaActualizacion($value);
				break;
			case 27:
				$this->setMetEliminado($value);
				break;
			case 28:
				$this->setMetCausaEliminacion($value);
				break;
			case 29:
				$this->setMetCausaActualizacion($value);
				break;
			case 30:
				$this->setMetTcProductoTerminado($value);
				break;
			case 31:
				$this->setMetTcEstabilidad($value);
				break;
			case 32:
				$this->setMetTcMateriaPrima($value);
				break;
			case 33:
				$this->setMetTcPureza($value);
				break;
			case 34:
				$this->setMetTcDisolucion($value);
				break;
			case 35:
				$this->setMetTcUniformidad($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MetodoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setMetCodigo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMetNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setMetTiempoAlistamiento($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMetTiempoAcondicionamiento($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setMetTiempoEstabilizacion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMetTiempoEstandar($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMetTiempoCorridaSistema($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMetTiempoCorridaCurvas($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMetNumInyeccionEstandar1($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setMetNumInyeccionEstandar2($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setMetNumInyeccionEstandar3($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setMetNumInyeccionEstandar4($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMetNumInyeccionEstandar5($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setMetNumInyeccionEstandar6($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setMetNumInyeccionEstandar7($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMetNumInyeccionEstandar8($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMetFechaRegistroSistema($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMetNumInyecXMuProducto($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMetNumInyecXMuEstabilidad($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMetNumInyecXMuMateriaPri($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setMetNumInyecXMuPureza($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setMetNumInyecXMuDisolucion($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setMetNumInyecXMuUniformidad($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setMetNumeroInyeccionEstandar($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setMetUsuCrea($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setMetUsuActualiza($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setMetFechaActualizacion($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setMetEliminado($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setMetCausaEliminacion($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setMetCausaActualizacion($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setMetTcProductoTerminado($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setMetTcEstabilidad($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setMetTcMateriaPrima($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setMetTcPureza($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setMetTcDisolucion($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setMetTcUniformidad($arr[$keys[35]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MetodoPeer::DATABASE_NAME);

		if ($this->isColumnModified(MetodoPeer::MET_CODIGO)) $criteria->add(MetodoPeer::MET_CODIGO, $this->met_codigo);
		if ($this->isColumnModified(MetodoPeer::MET_NOMBRE)) $criteria->add(MetodoPeer::MET_NOMBRE, $this->met_nombre);
		if ($this->isColumnModified(MetodoPeer::MET_TIEMPO_ALISTAMIENTO)) $criteria->add(MetodoPeer::MET_TIEMPO_ALISTAMIENTO, $this->met_tiempo_alistamiento);
		if ($this->isColumnModified(MetodoPeer::MET_TIEMPO_ACONDICIONAMIENTO)) $criteria->add(MetodoPeer::MET_TIEMPO_ACONDICIONAMIENTO, $this->met_tiempo_acondicionamiento);
		if ($this->isColumnModified(MetodoPeer::MET_TIEMPO_ESTABILIZACION)) $criteria->add(MetodoPeer::MET_TIEMPO_ESTABILIZACION, $this->met_tiempo_estabilizacion);
		if ($this->isColumnModified(MetodoPeer::MET_TIEMPO_ESTANDAR)) $criteria->add(MetodoPeer::MET_TIEMPO_ESTANDAR, $this->met_tiempo_estandar);
		if ($this->isColumnModified(MetodoPeer::MET_TIEMPO_CORRIDA_SISTEMA)) $criteria->add(MetodoPeer::MET_TIEMPO_CORRIDA_SISTEMA, $this->met_tiempo_corrida_sistema);
		if ($this->isColumnModified(MetodoPeer::MET_TIEMPO_CORRIDA_CURVAS)) $criteria->add(MetodoPeer::MET_TIEMPO_CORRIDA_CURVAS, $this->met_tiempo_corrida_curvas);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_1)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_1, $this->met_num_inyeccion_estandar_1);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_2)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_2, $this->met_num_inyeccion_estandar_2);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_3)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_3, $this->met_num_inyeccion_estandar_3);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_4)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_4, $this->met_num_inyeccion_estandar_4);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_5)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_5, $this->met_num_inyeccion_estandar_5);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_6)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_6, $this->met_num_inyeccion_estandar_6);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_7)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_7, $this->met_num_inyeccion_estandar_7);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_8)) $criteria->add(MetodoPeer::MET_NUM_INYECCION_ESTANDAR_8, $this->met_num_inyeccion_estandar_8);
		if ($this->isColumnModified(MetodoPeer::MET_FECHA_REGISTRO_SISTEMA)) $criteria->add(MetodoPeer::MET_FECHA_REGISTRO_SISTEMA, $this->met_fecha_registro_sistema);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYEC_X_MU_PRODUCTO)) $criteria->add(MetodoPeer::MET_NUM_INYEC_X_MU_PRODUCTO, $this->met_num_inyec_x_mu_producto);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYEC_X_MU_ESTABILIDAD)) $criteria->add(MetodoPeer::MET_NUM_INYEC_X_MU_ESTABILIDAD, $this->met_num_inyec_x_mu_estabilidad);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYEC_X_MU_MATERIA_PRI)) $criteria->add(MetodoPeer::MET_NUM_INYEC_X_MU_MATERIA_PRI, $this->met_num_inyec_x_mu_materia_pri);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYEC_X_MU_PUREZA)) $criteria->add(MetodoPeer::MET_NUM_INYEC_X_MU_PUREZA, $this->met_num_inyec_x_mu_pureza);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYEC_X_MU_DISOLUCION)) $criteria->add(MetodoPeer::MET_NUM_INYEC_X_MU_DISOLUCION, $this->met_num_inyec_x_mu_disolucion);
		if ($this->isColumnModified(MetodoPeer::MET_NUM_INYEC_X_MU_UNIFORMIDAD)) $criteria->add(MetodoPeer::MET_NUM_INYEC_X_MU_UNIFORMIDAD, $this->met_num_inyec_x_mu_uniformidad);
		if ($this->isColumnModified(MetodoPeer::MET_NUMERO_INYECCION_ESTANDAR)) $criteria->add(MetodoPeer::MET_NUMERO_INYECCION_ESTANDAR, $this->met_numero_inyeccion_estandar);
		if ($this->isColumnModified(MetodoPeer::MET_USU_CREA)) $criteria->add(MetodoPeer::MET_USU_CREA, $this->met_usu_crea);
		if ($this->isColumnModified(MetodoPeer::MET_USU_ACTUALIZA)) $criteria->add(MetodoPeer::MET_USU_ACTUALIZA, $this->met_usu_actualiza);
		if ($this->isColumnModified(MetodoPeer::MET_FECHA_ACTUALIZACION)) $criteria->add(MetodoPeer::MET_FECHA_ACTUALIZACION, $this->met_fecha_actualizacion);
		if ($this->isColumnModified(MetodoPeer::MET_ELIMINADO)) $criteria->add(MetodoPeer::MET_ELIMINADO, $this->met_eliminado);
		if ($this->isColumnModified(MetodoPeer::MET_CAUSA_ELIMINACION)) $criteria->add(MetodoPeer::MET_CAUSA_ELIMINACION, $this->met_causa_eliminacion);
		if ($this->isColumnModified(MetodoPeer::MET_CAUSA_ACTUALIZACION)) $criteria->add(MetodoPeer::MET_CAUSA_ACTUALIZACION, $this->met_causa_actualizacion);
		if ($this->isColumnModified(MetodoPeer::MET_TC_PRODUCTO_TERMINADO)) $criteria->add(MetodoPeer::MET_TC_PRODUCTO_TERMINADO, $this->met_tc_producto_terminado);
		if ($this->isColumnModified(MetodoPeer::MET_TC_ESTABILIDAD)) $criteria->add(MetodoPeer::MET_TC_ESTABILIDAD, $this->met_tc_estabilidad);
		if ($this->isColumnModified(MetodoPeer::MET_TC_MATERIA_PRIMA)) $criteria->add(MetodoPeer::MET_TC_MATERIA_PRIMA, $this->met_tc_materia_prima);
		if ($this->isColumnModified(MetodoPeer::MET_TC_PUREZA)) $criteria->add(MetodoPeer::MET_TC_PUREZA, $this->met_tc_pureza);
		if ($this->isColumnModified(MetodoPeer::MET_TC_DISOLUCION)) $criteria->add(MetodoPeer::MET_TC_DISOLUCION, $this->met_tc_disolucion);
		if ($this->isColumnModified(MetodoPeer::MET_TC_UNIFORMIDAD)) $criteria->add(MetodoPeer::MET_TC_UNIFORMIDAD, $this->met_tc_uniformidad);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MetodoPeer::DATABASE_NAME);

		$criteria->add(MetodoPeer::MET_CODIGO, $this->met_codigo);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getMetCodigo();
	}

	/**
	 * Generic method to set the primary key (met_codigo column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setMetCodigo($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Metodo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMetNombre($this->met_nombre);

		$copyObj->setMetTiempoAlistamiento($this->met_tiempo_alistamiento);

		$copyObj->setMetTiempoAcondicionamiento($this->met_tiempo_acondicionamiento);

		$copyObj->setMetTiempoEstabilizacion($this->met_tiempo_estabilizacion);

		$copyObj->setMetTiempoEstandar($this->met_tiempo_estandar);

		$copyObj->setMetTiempoCorridaSistema($this->met_tiempo_corrida_sistema);

		$copyObj->setMetTiempoCorridaCurvas($this->met_tiempo_corrida_curvas);

		$copyObj->setMetNumInyeccionEstandar1($this->met_num_inyeccion_estandar_1);

		$copyObj->setMetNumInyeccionEstandar2($this->met_num_inyeccion_estandar_2);

		$copyObj->setMetNumInyeccionEstandar3($this->met_num_inyeccion_estandar_3);

		$copyObj->setMetNumInyeccionEstandar4($this->met_num_inyeccion_estandar_4);

		$copyObj->setMetNumInyeccionEstandar5($this->met_num_inyeccion_estandar_5);

		$copyObj->setMetNumInyeccionEstandar6($this->met_num_inyeccion_estandar_6);

		$copyObj->setMetNumInyeccionEstandar7($this->met_num_inyeccion_estandar_7);

		$copyObj->setMetNumInyeccionEstandar8($this->met_num_inyeccion_estandar_8);

		$copyObj->setMetFechaRegistroSistema($this->met_fecha_registro_sistema);

		$copyObj->setMetNumInyecXMuProducto($this->met_num_inyec_x_mu_producto);

		$copyObj->setMetNumInyecXMuEstabilidad($this->met_num_inyec_x_mu_estabilidad);

		$copyObj->setMetNumInyecXMuMateriaPri($this->met_num_inyec_x_mu_materia_pri);

		$copyObj->setMetNumInyecXMuPureza($this->met_num_inyec_x_mu_pureza);

		$copyObj->setMetNumInyecXMuDisolucion($this->met_num_inyec_x_mu_disolucion);

		$copyObj->setMetNumInyecXMuUniformidad($this->met_num_inyec_x_mu_uniformidad);

		$copyObj->setMetNumeroInyeccionEstandar($this->met_numero_inyeccion_estandar);

		$copyObj->setMetUsuCrea($this->met_usu_crea);

		$copyObj->setMetUsuActualiza($this->met_usu_actualiza);

		$copyObj->setMetFechaActualizacion($this->met_fecha_actualizacion);

		$copyObj->setMetEliminado($this->met_eliminado);

		$copyObj->setMetCausaEliminacion($this->met_causa_eliminacion);

		$copyObj->setMetCausaActualizacion($this->met_causa_actualizacion);

		$copyObj->setMetTcProductoTerminado($this->met_tc_producto_terminado);

		$copyObj->setMetTcEstabilidad($this->met_tc_estabilidad);

		$copyObj->setMetTcMateriaPrima($this->met_tc_materia_prima);

		$copyObj->setMetTcPureza($this->met_tc_pureza);

		$copyObj->setMetTcDisolucion($this->met_tc_disolucion);

		$copyObj->setMetTcUniformidad($this->met_tc_uniformidad);


		$copyObj->setNew(true);

		$copyObj->setMetCodigo(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Metodo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MetodoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MetodoPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseMetodo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseMetodo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseMetodo
